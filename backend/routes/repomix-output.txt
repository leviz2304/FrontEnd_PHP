This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
cartRoute.js
orderRoute.js
productRoute.js
storeManagementProductRoute.js
storeManagementRoute.js
storeRoute.js
userRoute.js

================================================================
Files
================================================================

================
File: cartRoute.js
================
import express from "express"
import { addToCart, getUserCart, updateCart } from "../controllers/cartController.js"
import authUser from "../middleware/auth.js"

const cartRouter = express.Router()

cartRouter.post('/add', authUser, addToCart)
cartRouter.post('/get', authUser, getUserCart)
cartRouter.post('/update', authUser, updateCart)

export default cartRouter

================
File: orderRoute.js
================
// import express from "express"
// import adminAuth from "../middleware/adminAuth.js"
// import { allOrders, placeOrder, placeOrderStripe, updateStatus, userOrders, verifyStripe } from "../controllers/orderController.js"
// import authUser from "../middleware/auth.js"

// const orderRouter = express.Router()

// // FOR ADMIN
// orderRouter.post('/list', adminAuth, allOrders)
// orderRouter.post('/status', adminAuth, updateStatus)

// // FOR PAYMENT 
// orderRouter.post('/place', authUser, placeOrder)
// orderRouter.post('/stripe', authUser, placeOrderStripe)

// // FOR USER
// orderRouter.post('/userorders', authUser, userOrders)

// // VERIFY STRIPE METHOD
// orderRouter.post('/verifyStripe', authUser, verifyStripe)

// export default orderRouter

================
File: productRoute.js
================
import express from "express"
import { addProduct, listProducts, removeProduct, singleProduct } from "../controllers/productController.js"
import upload from "../middleware/multer.js"
import storeAuth from "../middleware/storeAuth.js"

const productRouter = express.Router()

productRouter.post("/add",storeAuth, upload.fields([{name:'image1', maxCount:1},{name:'image2', maxCount:1},{name:'image3', maxCount:1},{name:'image4', maxCount:1}]), addProduct)
productRouter.post("/remove",storeAuth, removeProduct)
productRouter.post("/single", singleProduct)
productRouter.get("/list", listProducts)

export default productRouter

================
File: storeManagementProductRoute.js
================
// src/routes/storeManagementProductRoute.js
import express from "express";
import upload from "../middleware/multer.js";
import {
  createProduct,
  listProducts,
  updateProduct,
  deleteProduct,
} from "../controllers/storeManagementProductController.js";
import storeAuth from "../middleware/storeAuth.js";

const router = express.Router();

router.post(
  "/products",
  storeAuth,
  upload.fields([
    { name: "image1", maxCount: 1 },
    { name: "image2", maxCount: 1 },
    { name: "image3", maxCount: 1 },
    { name: "image4", maxCount: 1 },
  ]),
  createProduct
);

router.get("/products", storeAuth, listProducts);
router.put("/products/:productId", storeAuth, updateProduct);
router.delete("/products/:productId", storeAuth, deleteProduct);

export default router;

================
File: storeManagementRoute.js
================
import express from "express";
import multer from "multer";
import {
  updateStoreInfo,
  updateStoreAvatar,
  getStoreProducts,
  updateStoreProduct,
  deleteStoreProduct,
  getMyStore

} from "../controllers/storeManagementController.js";
import storeAuth from "../middleware/storeAuth.js";  

const router = express.Router();

const storage = multer.diskStorage({
  filename: function (req, file, callback) {
    callback(null, file.originalname);
  },
});
const upload = multer({ storage });

router.put("/update-info", storeAuth, updateStoreInfo);

router.put("/update-avatar", storeAuth, upload.single("avatar"), updateStoreAvatar);

router.get("/products", storeAuth, getStoreProducts);

router.put("/products/:productId", storeAuth, updateStoreProduct);
router.get("/my-store", storeAuth, getMyStore);

router.delete("/products/:productId", storeAuth, deleteStoreProduct);

export default router;

================
File: storeRoute.js
================
// routes/storeRoute.js
import express from "express";
import { requestStore, getPendingStores, approveStore,getSingleStore } from "../controllers/storeController.js";
import authUser from "../middleware/auth.js";       // user phải đăng nhập
import adminAuth from "../middleware/adminAuth.js"; // admin mới được duyệt store

const storeRouter = express.Router();

// User gửi request mở store
storeRouter.post("/request", authUser, requestStore);

// Admin xem danh sách store pending
storeRouter.get("/pending", adminAuth, getPendingStores);

// Admin phê duyệt store
storeRouter.post("/approve", adminAuth, approveStore);
storeRouter.get("/single", getSingleStore);

export default storeRouter;

================
File: userRoute.js
================
import express from "express"
import { adminLogin, loginUser, registerUser } from "../controllers/userController.js"

const userRouter = express.Router()

userRouter.post('/register', registerUser)
userRouter.post('/login', loginUser)
userRouter.post('/admin', adminLogin)

export default userRouter



================================================================
End of Codebase
================================================================
