This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
App.jsx
assets/data.js
components/About.jsx
components/AvatarModal.jsx
components/Banner.jsx
components/Blog.jsx
components/CartTotal.jsx
components/CreateProductModal.jsx
components/EditProductModal.jsx
components/Features.jsx
components/Footer.jsx
components/Header.jsx
components/Hero.jsx
components/Item.jsx
components/Navbar.jsx
components/NewArrivals.jsx
components/NewsLetter.jsx
components/OrderDetail.jsx
components/PopularProducts.jsx
components/ProductCard.jsx
components/ProductDescription.jsx
components/ProductFeatures.jsx
components/ProductItem.jsx
components/ProductsSection.jsx
components/RelatedProducts.jsx
components/ReviewList.jsx
components/ReviewModal.jsx
components/Search.jsx
components/StoreInfoSection.jsx
components/StoreOrders.jsx
components/StoreProductItem.jsx
components/Title.jsx
components/ui/accordion.jsx
components/ui/alert.jsx
components/ui/badge.jsx
components/ui/button.jsx
components/ui/card.jsx
components/ui/checkbox.jsx
components/ui/dialog.jsx
components/ui/drawer.jsx
components/ui/dropdown-menu.jsx
components/ui/input.jsx
components/ui/label.jsx
components/ui/radio-group.jsx
components/ui/select.jsx
components/ui/separator.jsx
components/ui/skeleton.jsx
components/ui/table.jsx
components/ui/tabs.jsx
components/ui/textarea.jsx
context/ShopContext.jsx
index.css
lib/utils.js
main.jsx
pages/Blog.jsx
pages/Cart.jsx
pages/Collection.jsx
pages/Home.jsx
pages/Login.jsx
pages/OrderDetailsPage.jsx
pages/OrderFailed.jsx
pages/Orders.jsx
pages/OrdersPage.jsx
pages/OrderSuccess.jsx
pages/PlaceOrder.jsx
pages/Product.jsx
pages/RequestStore.jsx
pages/StoreManagement.jsx
pages/StorePage.jsx
pages/UserOrders.jsx
pages/Verify.jsx
utils/helpers.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="App.jsx">
import React from 'react'
import Header from './components/Header'
import { Route, Routes } from "react-router-dom"
import Home from './pages/Home'
import Collection from './pages/Collection'
import Blog from './pages/Blog'
import Product from './pages/Product'
import { ToastContainer } from "react-toastify"
import Cart from './pages/Cart'
import PlaceOrder from './pages/PlaceOrder'
import Login from './pages/Login'
import Orders from './pages/Orders'
import Verify from './pages/Verify'
import RequestStore from "./pages/RequestStore";
import StoreManagement from './pages/StoreManagement'
export const backend_url = import.meta.env.VITE_BACKEND_URL;
import OrderFailed from './pages/OrderFailed'
import OrderSuccess from './pages/OrderSuccess'
import UserOrders from './pages/UserOrders'
import OrderDetailsPage from './pages/OrderDetailsPage'
import StorePage from './pages/StorePage'
import OrdersTimeline from './pages/Orders'
const App = () => {
  return (
    <main className='overflow-hidden text-tertiary'>
      <ToastContainer />
      <Header />
      <Routes>
        <Route path='/' element={<Home />} />
        <Route path="/request-store" element={<RequestStore />} />
        <Route path="/my-store" element={<StoreManagement />} />
        <Route path="/order-failed" element={<OrderFailed />} />
        <Route path="/order-success" element={<OrderSuccess />} />
        <Route path="/orders" element={<UserOrders />} />
        <Route path="/store/:storeId" element={<StorePage />} />

        <Route path='/collection' element={<Collection />} />
        <Route path='/blog' element={<Blog />} />
        <Route path='/product/:productId' element={<Product />} />
        <Route path='/cart' element={<Cart />} />
        <Route path='/place-order' element={<PlaceOrder />} />
        <Route path='/login' element={<Login />} />
        {/* <Route path='/orders' element={<Orders />} /> */}
        <Route path='/verify' element={<Verify />} />
      </Routes>
    </main>
  )
}

export default App
</file>

<file path="assets/data.js">
import img1 from './product_1.png'
import img2_1 from './product_2_1.png'
import img2_2 from './product_2_2.png'
import img2_3 from './product_2_3.png'
import img2_4 from './product_2_4.png'
import img3 from './product_3.png'
import img4 from './product_4.png'
import img5 from './product_5.png'
import img6 from './product_6.png'
import img7 from './product_7.png'
import img8_1 from './product_8_1.png'
import img8_2 from './product_8_2.png'
import img8_3 from './product_8_3.png'
import img8_4 from './product_8_4.png'
import img9 from './product_9.png'
import img10 from './product_10.png'
import img11 from './product_11.png'
import img12 from './product_12.png'
import img13 from './product_13.png'
import img14 from './product_14.png'
import img15 from './product_15.png'
import img16 from './product_16.png'
import img17 from './product_17.png'
import img18 from './product_18.png'
import img19 from './product_19.png'
import img20 from './product_20.png'
import img21 from './product_21.png'
import img22 from './product_22.png'
import img23 from './product_23.png'
import img24 from './product_24.png'
import img25 from './product_25.png'
import img26 from './product_26.png'
import img27 from './product_27.png'
import img28 from './product_28.png'
import img29 from './product_29.png'
import img30 from './product_30.png'
import img31 from './product_31.png'
import img32 from './product_32.png'
import img33 from './product_33.png'
import img34 from './product_34.png'
import img35 from './product_35.png'
import img36 from './product_36.png'
import img37 from './product_37.png'
import img38 from './product_38.png'
import img39 from './product_39.png'
import img40 from './product_40.png'
import img41 from './product_41.png'
import img42 from './product_42.png'

// Blogs
import blog1 from "../assets/blogs/blog-1.png"
import blog2 from "../assets/blogs/blog-2.png"
import blog3 from "../assets/blogs/blog-3.png"
import blog4 from "../assets/blogs/blog-4.png"
import blog5 from "../assets/blogs/blog-5.png"
import blog6 from "../assets/blogs/blog-6.png"
import blog7 from "../assets/blogs/blog-7.png"
import blog8 from "../assets/blogs/blog-8.png"


export const products = [
    // Headphones (ID 1 to 7)
    {
        _id: "1",
        name: "Bluetooth Headset Pro",
        description: "Experience superior sound quality with these noise-cancelling headphones, perfect for long listening sessions.",
        price: 15,
        image: [img1],
        category: "Headphones",
        colors: ["Black", "Red", "White"],
        date: 1716634345448,
        popular: false
    },
    {
        _id: "2",
        name: "Noise Cancelling Headphones",
        description: "A premium wireless headset designed for crystal-clear calls and high-quality audio.",
        price: 22,
        image: [img2_1, img2_2, img2_3, img2_4],
        category: "Headphones",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716621345448,
        popular: false
    },
    {
        _id: "3",
        name: "Over-Ear Wireless Headphones",
        description: "Comfortable over-ear headphones with advanced sound technology, ideal for music lovers.",
        price: 20,
        image: [img3],
        category: "Headphones",
        colors: ["Black", "White", "Blue"],
        date: 1716234545448,
        popular: true
    },
    {
        _id: "4",
        name: "Wireless Noise Cancelling Headphones",
        description: "Lightweight and noise-cancelling, designed for immersive listening on the go.",
        price: 80,
        image: [img4],
        category: "Headphones",
        colors: ["Black", "Red", "Blue"],
        date: 1716621345448,
        popular: false
    },
    {
        _id: "5",
        name: "Gaming Headphones with Mic",
        description: "High-quality gaming headphones with a built-in microphone for an immersive gaming experience.",
        price: 40,
        image: [img5],
        category: "Headphones",
        colors: ["Red", "White", "Blue"],
        date: 1716622345448,
        popular: false
    },
    {
        _id: "6",
        name: "Sports Bluetooth Earphones",
        description: "Sweat-resistant Bluetooth earphones, perfect for active users who enjoy running and working out.",
        price: 60,
        image: [img6],
        category: "Headphones",
        colors: ["XS", "Black", "Red"],
        date: 1716623345448,
        popular: false
    },
    {
        _id: "7",
        name: "Foldable Wireless Headphones",
        description: "Portable foldable headphones offering excellent sound quality and comfort for on-the-go listening.",
        price: 20,
        image: [img7],
        category: "Headphones",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716624345448,
        popular: false
    },

    // Cameras (ID 8 to 14)
    {
        _id: "8",
        name: "Digital Camera Pro",
        description: "Capture stunning photos with this professional-grade digital camera, equipped with advanced features.",
        price: 40,
        image: [img8_1, img8_2, img8_3, img8_4],
        category: "Cameras",
        colors: ["Black", "Red"],
        date: 1716625345448,
        popular: false
    },
    {
        _id: "9",
        name: "4K DSLR Camera",
        description: "A 4K resolution DSLR camera designed for professional photographers and videographers.",
        price: 20,
        image: [img9],
        category: "Cameras",
        colors: ["Black", "Red",],
        date: 1716626345448,
        popular: false
    },
    {
        _id: "10",
        name: "Compact Digital Camera",
        description: "Compact and lightweight digital camera for everyday use, capturing high-quality images effortlessly.",
        price: 20,
        image: [img10],
        category: "Cameras",
        colors: ["Black", "Red"],
        date: 1716627345448,
        popular: false
    },
    {
        _id: "11",
        name: "Outdoor Action Camera",
        description: "Designed for adventurers, this action camera is waterproof and built to capture every moment in high-definition.",
        price: 30,
        image: [img11],
        category: "Cameras",
        colors: ["Red", "Red"],
        date: 1716628345448,
        popular: false
    },
    {
        _id: "12",
        name: "Professional Mirrorless Camera",
        description: "Mirrorless camera with advanced image stabilization and 4K video recording capability.",
        price: 10,
        image: [img12],
        category: "Cameras",
        colors: ["Black", "Red"],
        date: 1716629345448,
        popular: true
    },
    {
        _id: "13",
        name: "Camera Lens Kit",
        description: "Enhance your photography with this professional camera lens kit, perfect for a variety of shoots.",
        price: 20,
        image: [img13],
        category: "Cameras",
        colors: ["Black", "Red"],
        date: 1716630345448,
        popular: false
    },
    {
        _id: "14",
        name: "Camera Tripod Stand",
        description: "Stable tripod stand for perfect shots, whether you're shooting in the studio or outdoors.",
        price: 20,
        image: [img14],
        category: "Cameras",
        colors: ["Black", "Red"],
        date: 1716631345448,
        popular: false
    },

    // Mobiles (ID 15 to 21)
    {
        _id: "15",
        name: "Camera Flash Light",
        description: "High-power camera flash light designed to provide excellent lighting in all situations.",
        price: 15,
        image: [img15],
        category: "Mobiles",
        colors: ["XS", "Black", "Red"],
        date: 1716632345448,
        popular: true
    },
    {
        _id: "16",
        name: "5G Tecno Mobile",
        description: "Durable mobile designed for safety offering convenient storage space.",
        price: 20,
        image: [img16],
        category: "Mobiles",
        colors: ["Black", "Red", "White"],
        date: 1716633345448,
        popular: false
    },
    {
        _id: "17",
        name: "Smartphone Camera Lens Kit",
        description: "Enhance your smartphone photography with this portable camera lens kit.",
        price: 30,
        image: [img17],
        category: "Mobiles",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716634345448,
        popular: false
    },
    {
        _id: "18",
        name: "Mobile Phone 4G",
        description: "A high-performance mobile phone featuring a stunning display and powerful battery.",
        price: 10,
        image: [img18],
        category: "Mobiles",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716635345448,
        popular: false
    },
    {
        _id: "19",
        name: "5G Smartphone",
        description: "Experience ultra-fast 5G speeds and high-definition displays with this latest smartphone.",
        price: 30,
        image: [img19],
        category: "Mobiles",
        colors: ["Black", "Red", "White"],
        date: 1716636345448,
        popular: false
    },
    {
        _id: "20",
        name: "Mobile Phone Case",
        description: "Protect your mobile phone with this premium, shock-absorbent case.",
        price: 20,
        image: [img20],
        category: "Mobiles",
        colors: ["Black", "Red", "White"],
        date: 1716637345448,
        popular: false
    },
    {
        _id: "21",
        name: "Mobile Charger",
        description: "High-speed charging cable and adapter for your mobile devices, built to last.",
        price: 30,
        image: [img21],
        category: "Mobiles",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716638345448,
        popular: false
    },

    // Speakers (ID 22 to 28)
    {
        _id: "22",
        name: "Smartwatch Phone",
        description: "A smartwatch that connects seamlessly with your phone, offering notifications and more.",
        price: 400,
        image: [img22],
        category: "Speakers",
        colors: ["Red", "White", "Blue"],
        date: 1716639345448,
        popular: true
    },
    {
        _id: "23",
        name: "Bluetooth Mobile Speaker",
        description: "Compact mobile speaker with rich sound, perfect for your phone and outdoor activities.",
        price: 190,
        image: [img23],
        category: "Speakers",
        colors: ["Black", "Red", "White"],
        date: 1716640345448,
        popular: false
    },
    {
        _id: "24",
        name: "Portable Bluetooth Speaker",
        description: "Wireless speaker with deep bass, ideal for parties and outdoor events.",
        price: 250,
        image: [img24],
        category: "Speakers",
        colors: ["Black", "Red", "White"],
        date: 1716641345448,
        popular: false
    },
    {
        _id: "25",
        name: "Smart Bluetooth Speaker",
        description: "Advanced smart speaker with voice recognition and superior sound quality.",
        price: 20,
        image: [img25],
        category: "Speakers",
        colors: ["Red", "White", "Blue"],
        date: 1716642345448,
        popular: false
    },
    {
        _id: "26",
        name: "Portable Mini Bluetooth Speaker",
        description: "Compact Bluetooth speaker with powerful sound, perfect for on-the-go use.",
        price: 22,
        image: [img26],
        category: "Speakers",
        colors: ["Black", "Red", "White"],
        date: 1716643345448,
        popular: false
    },
    {
        _id: "27",
        name: "Wireless Home Speaker",
        description: "Powerful wireless speaker with home-theater sound quality for any space.",
        price: 30,
        image: [img27],
        category: "Speakers",
        colors: ["Black", "White"],
        date: 1716644345448,
        popular: true
    },
    {
        _id: "28",
        name: "Surround Sound Speaker",
        description: "High-quality surround sound speaker for cinematic experiences in your living room.",
        price: 530,
        image: [img28],
        category: "Speakers",
        colors: ["Black", "Red", "White"],
        date: 1716645345448,
        popular: false
    },

    // Mouses (ID 29 to 35)
    {
        _id: "29",
        name: "Wireless Gaming Mouse",
        description: "Precision wireless mouse designed for gamers with ultra-low latency and ergonomic design.",
        price: 120,
        image: [img29],
        category: "Mouse",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716646345448,
        popular: true
    },
    {
        _id: "30",
        name: "Ergonomic Wireless Mouse",
        description: "An ergonomic wireless mouse designed for comfort and long hours of usage.",
        price: 90,
        image: [img30],
        category: "Mouse",
        colors: ["Black", "Red", "Blue"],
        date: 1716647345448,
        popular: false
    },
    {
        _id: "31",
        name: "RGB Gaming Mouse",
        description: "Customizable RGB gaming mouse with advanced sensor technology and programmable buttons.",
        price: 40,
        image: [img31],
        category: "Mouse",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716648345448,
        popular: true
    },
    {
        _id: "32",
        name: "Wireless Mouse with USB Receiver",
        description: "Reliable wireless mouse with a USB receiver, ideal for everyday tasks.",
        price: 40,
        image: [img32],
        category: "Mouse",
        colors: ["Black", "Red", "White"],
        date: 1716649345448,
        popular: false
    },
    {
        _id: "33",
        name: "Bluetooth Multi-Device Mouse",
        description: "Bluetooth mouse that can easily switch between multiple devices, perfect for multitaskers.",
        price: 80,
        image: [img33],
        category: "Mouse",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716650345448,
        popular: false
    },
    {
        _id: "34",
        name: "Compact Wireless Mouse",
        description: "Compact and portable wireless mouse, ideal for travel and working on the go.",
        price: 30,
        image: [img34],
        category: "Mouse",
        colors: ["Black", "Red", "Blue"],
        date: 1716651345448,
        popular: false
    },
    {
        _id: "35",
        name: "Gaming Mouse with Customizable Weights",
        description: "Gaming mouse with customizable weights for personalized performance and comfort.",
        price: 15,
        image: [img35],
        category: "Mouse",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716652345448,
        popular: true
    },

    // Watches (ID 36 to 42)
    {
        _id: "36",
        name: "Smart Fitness Watch",
        description: "Track your workouts and monitor your health with this all-in-one smart fitness watch.",
        price: 20,
        image: [img36],
        category: "Watches",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716653345448,
        popular: true
    },
    {
        _id: "37",
        name: "Luxury Smartwatch",
        description: "Stylish and elegant smartwatch that blends fashion with functionality, featuring health tracking and notifications.",
        price: 450,
        image: [img37],
        category: "Watches",
        colors: ["Gold", "Silver", "Black"],
        date: 1716654345448,
        popular: false
    },
    {
        _id: "38",
        name: "Sports Smartwatch",
        description: "Perfect for athletes, this smartwatch tracks workouts, heart rate, and more with a rugged design.",
        price: 270,
        image: [img38],
        category: "Watches",
        colors: ["Red", "Blue", "Black"],
        date: 1716655345448,
        popular: false
    },
    {
        _id: "39",
        name: "Android Smartwatch",
        description: "An Android-compatible smartwatch offering seamless integration with your mobile apps and notifications.",
        price: 20,
        image: [img39],
        category: "Watches",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716656345448,
        popular: false
    },
    {
        _id: "40",
        name: "Round Dial Smartwatch",
        description: "Elegant round dial smartwatch featuring a sleek design and full touch-screen capabilities.",
        price: 350,
        image: [img40],
        category: "Watches",
        colors: ["Gold", "Silver", "Black", "White"],
        date: 1716657345448,
        popular: false
    },
    {
        _id: "41",
        name: "Smartwatch with Heart Rate Monitor",
        description: "Monitor your heart rate, sleep, and fitness progress with this advanced smartwatch.",
        price: 22,
        image: [img41],
        category: "Watches",
        colors: ["Black", "Red", "White", "Blue"],
        date: 1716658345448,
        popular: false
    },
    {
        _id: "42",
        name: "Smartwatch for Kids",
        description: "Kid-friendly smartwatch with fun features and parental control options.",
        price: 120,
        image: [img42],
        category: "Watches",
        colors: ["Pink", "Blue", "Red"],
        date: 1716659345448,
        popular: false
    }
];


export const blogs = [
    { title: "Top Shopping Tips for Smart Buyers", category: "Cameras", image: blog1 },
    { title: "Latest Trends in Online Shopping 2024", category: "Mobiles", image: blog2 },
    { title: "How to Spot the Best Online Deals", category: "Mobiles", image: blog3 },
    { title: "Why E-Commerce is the Future", category: "Headphones", image: blog4 },
    { title: "Smart Buying Tips for Online Shoppers", category: "Cameras", image: blog5 },
    { title: "Upcoming Trends in Shopping 2024", category: "Mobiles", image: blog6 },
    { title: "Best Strategies to Find Online Discounts", category: "Mobiles", image: blog7 },
    { title: "How E-Commerce is Changing", category: "Headphones", image: blog8 }
]
</file>

<file path="components/About.jsx">
import React from 'react'
import Title from './Title'
import testimonial from "../assets/testimonial.png"
import { TbLocation } from 'react-icons/tb'
import { RiAdminLine, RiSecurePaymentLine, RiSoundModuleLine } from 'react-icons/ri'
import { FaQuoteLeft, FaUsersLine } from 'react-icons/fa6'
import about from "../assets/about.png"


const About = () => {
  return (
    <section className='max-padd-container py-16'>
      {/* CONTAINER */}
      <div className='flex flex-col md:flex-row gap-5 gap-y-10'>
        {/* TESTIMONIAL */}
        <div className='flex-1 flexCenter flex-col'>
          <Title title1={'People'} title2={"Says"} title1Styles={"h3"} titleStyles={'!pb-2'}/>
          <img src={testimonial} alt="" height={55} width={55} className='rounded-full'/>
          <h4 className='h4 mt-6'>John Doe</h4>
          <p className='relative bottom-2'>CEO At TechStack</p>
          <FaQuoteLeft className='text-3xl'/>
          <p className='max-w-[222px] mt-5 text-center'>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Et libero reiciendis quibusdam ad perspiciatis non ut?</p>
        </div>
        {/* BANNER */}
        <div className='flex-[2] flex rounded-2xl relative'>
          <img src={about} alt="" className='rounded-2xl'/>
          <div className='absolute h-full w-full bg-white/20 top-0 left-0'/>
          <div className='absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white/80 p-6 rounded-xl'>
            <h4 className='bold-18 text-center'>Top view in this <br />
            week</h4>
            <h2 className='h2 uppercase'>Trending</h2>
          </div>
        </div>
        {/* ABOUT */}
        <div className='flex-[1] flexCenter flex-col'>
          <Title title1={'About'} title2={"Us"} title1Styles={'h3'} titleStyles={'!pb-2'}/>
          <div className='flex flex-col items-start'>
            <div className='flexCenter gap-3 mb-3'>
              <RiSecurePaymentLine className='text-xl'/>
              <div>
                <h5 className='h5'>Fast & Secure</h5>
                <p>Optimized performance</p>
              </div>
            </div>
            <div className='flexCenter gap-3 mb-3'>
              <RiSoundModuleLine className='text-xl'/>
              <div>
                <h5 className='h5'>Advanced Filtering</h5>
                <p>Find items quickly</p>
              </div>
            </div>
            <div className='flexCenter gap-3 mb-3'>
              <FaUsersLine className='text-xl'/>
              <div>
                <h5 className='h5'>User Reviews</h5>
                <p>Ratings & feedback</p>
              </div>
            </div>
            <div className='flexCenter gap-3 mb-3'>
              <TbLocation className='text-xl'/>
              <div>
                <h5 className='h5'>Order Tracking</h5>
                <p>Live order status</p>
              </div>
            </div>
            <div className='flexCenter gap-3 mb-3'>
              <RiAdminLine className='text-xl'/>
              <div>
                <h5 className='h5'>Admin Dashboard</h5>
                <p>Manage store easily</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

export default About
</file>

<file path="components/AvatarModal.jsx">
// src/components/AvatarModal.jsx
import React from "react";

const AvatarModal = ({ avatarPreview, handleAvatarChange, handleSaveAvatar, onCancel }) => {
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="bg-white p-6 rounded-xl w-[90%] max-w-md">
        <h3 className="h3 mb-4">Update Store Avatar</h3>
        <div className="mb-4">
          <img
            src={avatarPreview}
            alt="Avatar Preview"
            className="w-32 h-32 rounded-full object-cover mx-auto"
          />
        </div>
        <input type="file" onChange={handleAvatarChange} className="border p-2 w-full mb-4" />
        <div className="flex justify-end gap-4">
          <button onClick={onCancel} className="btn-white rounded px-3 py-1">
            Cancel
          </button>
          <button onClick={handleSaveAvatar} className="btn-secondary rounded px-3 py-1">
            Save
          </button>
        </div>
      </div>
    </div>
  );
};

export default AvatarModal;
</file>

<file path="components/Banner.jsx">
import React from 'react'
import banner1 from "../assets/electronics-banner-1.png"
import banner2 from "../assets/electronics-banner-2.png"


const Banner = () => {
  return (
    <section className='max-padd-container'>
      <div className='flex flex-col sm:flex-row flex-wrap gap-4 xl:gap-14 gap-y-10'>
        <div className='flex-1'>
          <img src={banner1} alt="" className='rounded-lg'/>
        </div>
        <div className='flex-1'>
          <img src={banner2} alt="" className='rounded-lg'/>
        </div>
      </div>
    </section>
  )
}

export default Banner
</file>

<file path="components/Blog.jsx">
import React from "react";
import { blogs } from "../assets/data";

const Blog = () => {
  return (
    <section className="max-padd-container pb-16">
      {/* CONTAINER */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5">
        {blogs.slice(0, 4).map((blog) => (
          <div key={blog.title} className="relative">
            <img src={blog.image} alt="blogImg" className="rounded-xl" />
            {/* INFO */}
              <p className="medium-14 mt-6">{blog.category}</p>
              <h5 className="h5 pr-4 mb-1">{blog.title}</h5>
              <p>
                Lorem ipsum dolor sit, amet consectetur adipisicing elit.
                Aliquid, iusto natus!
              </p>
              <button className="underline mt-2 bold-14">
                continue reading
              </button>
          </div>
        ))}
      </div>
    </section>
  );
};

export default Blog;
</file>

<file path="components/CartTotal.jsx">
import React, { useContext } from "react";
import { ShopContext } from "../context/ShopContext";
import { useNavigate } from "react-router-dom"; // <--- 1. Import useNavigate

// Import Shadcn UI components
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Button } from "@/components/ui/button";
import { ArrowRight } from "lucide-react";

const CartTotal = () => {
  const { currency, getCartAmount, delivery_charges } = useContext(ShopContext);
  const navigate = useNavigate(); // <--- 2. Khởi tạo hook useNavigate

  const subTotal = getCartAmount();
  const shipping = subTotal > 0 ? delivery_charges : 0;
  const total = subTotal + shipping;

  const formatCurrency = (amount) => {
    return `${currency || '$'}${amount.toFixed(2)}`;
  };

  // --- 3. Handler cho nút Checkout ---
  const handleCheckout = () => {
    navigate('/place-order'); // Điều hướng đến trang PlaceOrder
  };

  return (
    <Card className="w-full sticky top-24">
      <CardHeader>
        <CardTitle className="text-xl">Order Summary</CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {/* Subtotal */}
        <div className="flex justify-between items-center text-sm">
          <span className="text-muted-foreground">Subtotal:</span>
          <span className="font-medium text-foreground">{formatCurrency(subTotal)}</span>
        </div>
        <Separator />
        {/* Shipping Fee */}
        <div className="flex justify-between items-center text-sm">
          <span className="text-muted-foreground">Shipping Fee:</span>
          <span className="font-medium text-foreground">{formatCurrency(shipping)}</span>
        </div>
      </CardContent>
      <CardFooter className="flex flex-col space-y-4 pt-4">
        <Separator />
        {/* Total */}
        <div className="flex justify-between items-center w-full text-base font-semibold">
          <span>Total:</span>
          <span>{formatCurrency(total)}</span>
        </div>
        {/* --- 4. Gắn onClick vào nút Checkout --- */}
        <Button
          className="w-full group bg-black text-white hover:bg-gray-800 dark:bg-white dark:text-black dark:hover:bg-gray-200"
          size="lg"
          disabled={subTotal === 0}
          onClick={handleCheckout} // <--- Gắn handler vào đây
        >
          Proceed to Checkout
          <ArrowRight className="ml-2 h-5 w-5 transition-transform duration-300 group-hover:translate-x-1" />
        </Button>
      </CardFooter>
    </Card>
  );
};

export default CartTotal;
</file>

<file path="components/CreateProductModal.jsx">
// src/components/CreateProductModal.jsx
import React, { useState } from "react";
import upload_icon from "../assets/upload.png";
import { FaCheck } from "react-icons/fa6";

const CreateProductModal = ({
  createProductData,
  setCreateProductData,
  handleSaveNewProduct,
  onCancel,
}) => {
  const [images, setImages] = useState({
    image1: null,
    image2: null,
    image3: null,
    image4: null,
  });
  const [loading, setLoading] = useState(false);

  const handleImageChange = (e, key) => {
    setImages((prev) => ({ ...prev, [key]: e.target.files[0] }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const colorsArray = createProductData.colors.split(",").map((c) => c.trim());
    const formData = new FormData();
    formData.append("name", createProductData.name);
    formData.append("description", createProductData.description);
    formData.append("price", createProductData.price);
    formData.append("category", createProductData.category);
    formData.append("popular", createProductData.popular);
    formData.append("colors", JSON.stringify(colorsArray));

    Object.keys(images).forEach((key) => {
      if (images[key]) {
        formData.append(key, images[key]);
      }
    });

    setLoading(true);
    try {
      await handleSaveNewProduct(formData);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/50"
      onSubmit={handleSubmit}
    >
      <div className="bg-white p-6 rounded-xl w-[90%] max-w-md">
        <h3 className="h3 mb-4">Add New Product</h3>
        <div className="flex flex-col gap-y-4">
          {/* Product Name */}
          <div>
            <label className="medium-15">Product Name</label>
            <input
              type="text"
              value={createProductData.name}
              onChange={(e) =>
                setCreateProductData({ ...createProductData, name: e.target.value })
              }
              className="w-full p-2 border rounded"
              placeholder="Product name"
            />
          </div>
          {/* Description */}
          <div>
            <label className="medium-15">Product Description</label>
            <textarea
              value={createProductData.description}
              onChange={(e) =>
                setCreateProductData({ ...createProductData, description: e.target.value })
              }
              className="w-full p-2 border rounded"
              placeholder="Product description"
            />
          </div>
          {/* Price */}
          <div>
            <label className="medium-15">Product Price</label>
            <input
              type="number"
              value={createProductData.price}
              onChange={(e) =>
                setCreateProductData({ ...createProductData, price: e.target.value })
              }
              className="w-full p-2 border rounded"
              placeholder="Product price"
            />
          </div>
          {/* Category */}
          <div>
            <label className="medium-15">Category</label>
            <input
              type="text"
              value={createProductData.category}
              onChange={(e) =>
                setCreateProductData({ ...createProductData, category: e.target.value })
              }
              className="w-full p-2 border rounded"
              placeholder="Product category"
            />
          </div>
          {/* Popular */}
          <div className="flex items-center gap-2">
            <label className="medium-15">Popular</label>
            <input
              type="checkbox"
              checked={createProductData.popular}
              onChange={(e) =>
                setCreateProductData({ ...createProductData, popular: e.target.checked })
              }
            />
          </div>
          {/* Colors */}
          <div>
            <label className="medium-15">Colors (comma separated)</label>
            <input
              type="text"
              value={createProductData.colors}
              onChange={(e) =>
                setCreateProductData({ ...createProductData, colors: e.target.value })
              }
              className="w-full p-2 border rounded"
              placeholder="e.g., Blue, Red"
            />
          </div>
          {/* Upload Images */}
          <div className="flex gap-2 pt-2">
            {["image1", "image2", "image3", "image4"].map((imgKey, i) => (
              <label key={i} htmlFor={imgKey}>
                <img
                  src={
                    images[imgKey]
                      ? URL.createObjectURL(images[imgKey])
                      : upload_icon
                  }
                  alt="upload preview"
                  className="w-16 h-16 aspect-square object-cover ring-1 ring-slate-900/5 rounded-lg"
                />
                <input
                  onChange={(e) => handleImageChange(e, imgKey)}
                  type="file"
                  id={imgKey}
                  hidden
                />
              </label>
            ))}
          </div>
        </div>
        <div className="flex justify-end gap-4 mt-6">
          <button type="button" onClick={onCancel} className="btn-white rounded px-3 py-1">
            Cancel
          </button>
          <button type="submit" className="btn-secondary rounded px-3 py-1" disabled={loading}>
            {loading ? "Saving..." : "Save"}
          </button>
        </div>
      </div>
    </form>
  );
};

export default CreateProductModal;
</file>

<file path="components/EditProductModal.jsx">
// src/components/EditProductModal.jsx
import React from "react";

const EditProductModal = ({ editProductData, setEditProductData, handleSaveProduct, onCancel }) => {
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="bg-white p-6 rounded-xl w-[90%] max-w-md">
        <h3 className="h3 mb-4">Edit Product</h3>
        <div className="flex flex-col gap-y-4">
          <div>
            <label className="medium-15">Name</label>
            <input
              type="text"
              value={editProductData.name}
              onChange={(e) => setEditProductData({ ...editProductData, name: e.target.value })}
              className="w-full p-2 border rounded"
            />
          </div>
          <div>
            <label className="medium-15">Price</label>
            <input
              type="number"
              value={editProductData.price}
              onChange={(e) => setEditProductData({ ...editProductData, price: e.target.value })}
              className="w-full p-2 border rounded"
            />
          </div>
          <div>
            <label className="medium-15">Description</label>
            <textarea
              value={editProductData.description}
              onChange={(e) => setEditProductData({ ...editProductData, description: e.target.value })}
              className="w-full p-2 border rounded"
            />
          </div>
          <div>
            <label className="medium-15">Category</label>
            <input
              type="text"
              value={editProductData.category}
              onChange={(e) => setEditProductData({ ...editProductData, category: e.target.value })}
              className="w-full p-2 border rounded"
            />
          </div>
          <div className="flex items-center gap-2">
            <label className="medium-15">Popular</label>
            <input
              type="checkbox"
              checked={editProductData.popular}
              onChange={(e) => setEditProductData({ ...editProductData, popular: e.target.checked })}
            />
          </div>
          <div>
            <label className="medium-15">Colors (comma separated)</label>
            <input
              type="text"
              value={editProductData.colors}
              onChange={(e) => setEditProductData({ ...editProductData, colors: e.target.value })}
              className="w-full p-2 border rounded"
              placeholder="e.g., Red, Blue, Green"
            />
          </div>
        </div>
        <div className="flex justify-end gap-4 mt-6">
          <button onClick={onCancel} className="btn-white rounded px-3 py-1">
            Cancel
          </button>
          <button onClick={handleSaveProduct} className="btn-secondary rounded px-3 py-1">
            Save
          </button>
        </div>
      </div>
    </div>
  );
};

export default EditProductModal;
</file>

<file path="components/Features.jsx">
import React from "react";
import { RiMoneyDollarCircleLine } from "react-icons/ri";
import { TbTruckDelivery } from "react-icons/tb";
import { BiSupport } from "react-icons/bi";

const Features = () => {
  return (
    <section className="max-padd-container mt-16">
      {/* CONTAINER */}
      <div className="max-padd-container flexBetween flex-wrap gap-8 rounded-2xl">
        <div className="flexCenter gap-x-3">
          <RiMoneyDollarCircleLine className="text-3xl" />
          <div>
            <h4 className="medium-15">MONEY-BACK GUARANTEE</h4>
            <p>100% refund guaranteed if you're not satisfied.</p>
          </div>
        </div>
        <div className="flexCenter gap-x-3">
          <TbTruckDelivery className="text-3xl" />
          <div>
            <h4 className="medium-15">FREE SHIPPING & RETURNS</h4>
            <p>Free shipping available on all orders above $99.</p>
          </div>
        </div>
        <div className="flexCenter gap-x-3">
          <BiSupport className="text-3xl" />
          <div>
            <h4 className="medium-15">24/7 ONLINE SUPPORT</h4>
            <p>Our team is here to assist you round the clock.</p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Features;
</file>

<file path="components/Footer.jsx">
import React from "react";
import cards from "../assets/cards.png"


const Footer = () => {
  return (
    <footer>
      <div className="max-padd-container flex items-start justify-between flex-wrap gap-12 mt-12">
        {/* logo - Left side */}
        <div className="flex flex-col max-w-sm gap-y-5">
          <div className="bold-28">
            Underdogs
          </div>
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas
            earum reprehenderit possimus!
          </p>
          <img src={cards} alt="" height={33} width={144} className="mt-5"/>
        </div>
        <div className="flexStart gap-7 xl:gap-x-36 flex-wrap">
          <ul>
            <h4 className="h4 mb-3">Customer Service</h4>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Help center
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Payment methods
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Contact
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Shipping status
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Complaints
              </a>
            </li>
          </ul>
          <ul>
            <h4 className="h4 mb-3">Legal</h4>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Privacy Policy
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Cookie settings
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Terms & conditions
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Cancelation
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Imprint
              </a>
            </li>
          </ul>
          <ul>
            <h4 className="h4 mb-3">Others</h4>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Our teams
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Sustainability
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Press
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Jobs
              </a>
            </li>
            <li className="my-2">
              <a href="" className="text-gray-30 regular-14 ">
                Newsletter
              </a>
            </li>
          </ul>
        </div>
      </div>
      {/* copyrights */}
      <p className="max-padd-container bg-primary medium-14 py-2 px-8 rounded flexBetween mt-6">
        <span>2025 Underdogs</span>
        <span>All rights reserved</span>
      </p>
    </footer>
  );
};

export default Footer;
</file>

<file path="components/Header.jsx">
import React, { useContext } from "react";
import { Link, useNavigate } from "react-router-dom"; // Import useNavigate
import Navbar from "./Navbar";
import { TbUserCircle } from "react-icons/tb";
import { LogIn } from "lucide-react"; // Giữ lại icon LogIn
import { ShopContext } from "../context/ShopContext";
import { Button } from "@/components/ui/button";

// --- THÊM IMPORT CHO DROPDOWNMENU ---
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel, // Tùy chọn: thêm tiêu đề
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
// --- KẾT THÚC IMPORT ---

const Header = () => {
    // Lấy navigate từ hook useNavigate
    const navigate = useNavigate();
    const { getCartCount, token, setToken, storeInfo } = useContext(ShopContext); // Không cần navigate từ context nữa

    const logout = () => {
        localStorage.removeItem("token");
        localStorage.removeItem("storeInfo"); // Cũng nên xóa storeInfo khi logout
        setToken("");
        // navigate("/login"); // Không cần navigate ở đây, DropdownMenuItem sẽ làm
    };

    return (
        <header className="max-padd-container w-full mb-4 md:mb-6 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between py-3">
                {/* LOGO */}
                <Link to="/" className="flex items-center gap-x-2 flex-1 bold-24 xl:bold-28 text-gray-900 dark:text-white">
                    Underdogs
                </Link>

                {/* NAVBAR CONTAINER */}
                <div className="flex-1 flex justify-center items-center">
                    <Navbar
                        containerStyles={
                            "hidden xl:flex items-center gap-x-5 xl:gap-x-6 text-sm font-medium bg-black text-white ring-1 ring-gray-800 rounded-lg p-2"
                        }
                    />
                </div>

                {/* BUTTONS CONTAINER */}
                <div className="flex-1 flex items-center justify-end gap-x-3 xs:gap-x-4">

                    {/* CART */}
                    <Link to="/cart"> {/* Bỏ relative group không cần thiết */}
                         <Button variant="outline" size="default" className="rounded-full relative px-4 border-gray-300 hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-800 text-gray-900 dark:text-white">
                            Cart
                            <span className="ml-1 bg-black text-white text-xs font-bold absolute -top-2 -right-2 flex items-center justify-center w-5 h-5 rounded-full shadow-md">
                                {getCartCount()}
                            </span>
                        </Button>
                    </Link>

                    {/* --- USER PROFILE / LOGIN (SỬ DỤNG DROPDOWNMENU) --- */}
                    {token ? (
                        <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="icon" className="rounded-full">
                                <TbUserCircle className="w-10 h-10 cursor-pointer text-gray-700 dark:text-gray-300" />
                                <span className="sr-only">Open user menu</span>
                                </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent className="w-48 mr-4" align="end"> {/* Căn phải */}
                                <DropdownMenuLabel>My Account</DropdownMenuLabel>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem onClick={() => navigate("/profile")} className="cursor-pointer">
                                    Profile
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => navigate("/orders")} className="cursor-pointer">
                                    Orders
                                </DropdownMenuItem>
                                {storeInfo && storeInfo.status === "approved" ? (
                                    <DropdownMenuItem onClick={() => navigate("/my-store")} className="cursor-pointer">
                                        My Store
                                    </DropdownMenuItem>
                                ) : (
                                    <DropdownMenuItem onClick={() => navigate("/request-store")} className="cursor-pointer">
                                        Open Store
                                    </DropdownMenuItem>
                                )}
                                <DropdownMenuSeparator />
                                <DropdownMenuItem onClick={() => { logout(); navigate('/login'); }} className="cursor-pointer text-red-600 dark:text-red-400 focus:bg-red-100 dark:focus:bg-red-900/50 focus:text-red-700 dark:focus:text-red-400">
                                    Logout
                                </DropdownMenuItem>
                            </DropdownMenuContent>
                        </DropdownMenu>
                    ) : (
                        // Button Login
                        <Button onClick={() => navigate("/login")} variant="outline" className="rounded-full border-gray-300 hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-800 text-gray-900 dark:text-white">
                            Login
                            <LogIn className="ml-2 h-4 w-4" />
                        </Button>
                    )}
                    {/* --- KẾT THÚC DROPDOWNMENU --- */}

                </div>
            </div>
        </header>
    );
};

export default Header;
</file>

<file path="components/Hero.jsx">
import React from "react";
import { Button } from "@/components/ui/button";
import { ArrowRight } from 'lucide-react';
import clothingBanner from "../assets/banner.jpg"; // Bỏ hoặc thay thế bằng ảnh banner quần áo của bạn
// Ví dụ: import clothingBanner from "../assets/clothing-banner.jpg";

const Hero = () => {
  return (
    <section className="max-padd-container py-12 md:py-20">
      <div className="relative bg-slate-300 border border-gray-200 dark:border-gray-800 p-8 md:p-16 lg:p-20 rounded-3xl">
        <div className="flex flex-col items-start max-w-2xl z-10 relative"> {/* Thêm z-10 relative để text nổi lên trên ảnh (nếu có) */}

          {/* Tiêu đề phụ - Thay đổi nội dung và màu sắc */}
          <p className="text-sm font-medium uppercase tracking-wider text-gray-600 dark:text-gray-400 mb-2">
             {/* Ví dụ: NEW SEASON // SPRING/SUMMER '25 (Dùng ngày hiện tại 2025) */}
             SPRING/SUMMER '25
          </p>

          {/* Tiêu đề chính - Thay đổi nội dung */}
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-4 leading-tight">
            {/* Ví dụ: New Season Styles Arrived // Explore Your Unique Style */}
            New Season Styles Arrived
          </h1>

          {/* Mô tả - Thay đổi nội dung */}
          <p className="text-base sm:text-lg text-gray-600 dark:text-gray-400 mb-8 max-w-lg">
            {/* Ví dụ: Discover our latest collection... */}
            Discover our latest collection of streetwear, essentials, and statement pieces. Update your wardrobe today.
          </p>

          {/* Button - Style đen trắng */}
          <Button size="lg" className="group bg-black text-white hover:bg-gray-800 dark:bg-white dark:text-black dark:hover:bg-gray-200">
            Shop Collection
            <ArrowRight className="ml-2 h-5 w-5 transition-transform duration-300 group-hover:translate-x-1" />
          </Button>
        </div>

        {/* --- PHẦN THÊM ẢNH BANNER QUẦN ÁO --- */}
        {/*
         1. Import ảnh của bạn ở đầu file (ví dụ: import clothingBanner from "../assets/clothing-banner.jpg";)
         2. Bỏ comment phần img dưới đây và thay src={clothingBanner}
         3. Điều chỉnh className để ảnh hiển thị đẹp mắt (ví dụ: vị trí, kích thước, độ trong suốt)
        */}
        
        <img
          src={clothingBanner} // <-- Thay thế bằng biến ảnh bạn đã import
          alt="Featured Clothing Styles" // <-- Thay đổi alt text
          // Điều chỉnh các class này cho phù hợp với ảnh và thiết kế của bạn
          className="absolute top-0 right-0 h-full w-1/2 object-cover opacity-80 lg:opacity-100 rounded-r-3xl hidden md:block pointer-events-none"
        />
       

      </div>
    </section>
  );
};

export default Hero;
</file>

<file path="components/Item.jsx">
import React, { useState } from "react";
import { Link } from "react-router-dom";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ShoppingBag } from "lucide-react";
import { cn } from "@/lib/utils";

const Item = ({ product, className }) => {
  const [hovered, setHovered] = useState(false);

  // --- Loading State ---
  if (!product || !product.image || product.image.length === 0) {
    // Có thể giữ nguyên hoặc tùy chỉnh thêm nếu muốn
    return (
      <Card className={cn("overflow-hidden group animate-pulse bg-gray-200 dark:bg-gray-800 h-80 rounded-lg", className)}>
         {/* Có thể thêm các khối placeholder mờ bên trong */}
      </Card>
    );
  }

  // --- Render Product Card ---
  return (
    // Bỏ border mặc định, thêm border + bg nhẹ khi hover
    <Card
      className={cn(
        "overflow-hidden group border border-transparent rounded-lg", // Bỏ border-border, thêm border-transparent
        "hover:shadow-lg hover:border-gray-200 dark:hover:border-gray-700", // Thêm border khi hover
        "hover:bg-gray-50/50 dark:hover:bg-gray-900/50", // Thêm bg nhẹ khi hover (tùy chọn)
        "transition-all duration-300 ease-in-out", // Thêm transition chung
        className
      )}
      onMouseEnter={() => setHovered(true)} // Chuyển hover state lên Card chính
      onMouseLeave={() => setHovered(false)}
    >
      <CardHeader className="p-0 relative">
        {/* Link bao quanh ảnh */}
        <Link
          to={`/product/${product._id}`}
          className="aspect-square block overflow-hidden rounded-t-lg" // Bo góc trên cho khớp Card
        >
          <img
            src={
              // Hiển thị ảnh thứ 2 khi hover (nếu có)
              product.image.length > 1 && hovered
                ? product.image[1]
                : product.image[0]
            }
            alt={product.name || "Product Image"}
            className="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105" // Giữ hiệu ứng zoom
            loading="lazy"
          />
        </Link>
      </CardHeader>
      <CardContent className="p-3 space-y-1">
        {/* Category */}
        {product.category && (
          <p className="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide">{product.category}</p>
        )}
        {/* Product Name */}
        <h3 className="text-sm font-semibold line-clamp-2 text-gray-900 dark:text-white h-10">
          {product.name}
        </h3>
      </CardContent>
      <CardFooter className="p-3 flex justify-between items-center pt-0">
        {/* Price - Bỏ text-primary, dùng màu đen/trắng */}
        <p className="text-base font-bold text-gray-900 dark:text-white">
            ${product.price?.toFixed(2) || '0.00'}
        </p>

        {/* Add to Cart Button - Chỉ hiện khi hover Card */}
        <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300 ease-in-out">
           <Button
             size="icon"
             variant="outline"
             className={cn(
               "h-8 w-8 rounded-full", // Có thể dùng rounded-full nếu muốn
               "border-gray-300 hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-800", // Style B&W outline
               "text-gray-700 dark:text-gray-300" // Màu icon
             )}
             aria-label="Add to cart"
             // Thêm onClick handler thực tế ở đây nếu cần
             onClick={() => addToCart(product._id)}
           >
             <ShoppingBag className="h-4 w-4" />
           </Button>
        </div>

      </CardFooter>
    </Card>
  );
};

export default Item;
</file>

<file path="components/Navbar.jsx">
import React from "react";
import { NavLink } from "react-router-dom";
import { cn } from "@/lib/utils";

// Bỏ prop isMenuOpened và onClick
const Navbar = ({ containerStyles }) => {
  const navLinks = [
    { path: "/", title: "Home" },
    { path: "/collection", title: "Collection" },
    { path: "/blog", title: "Blog" },
    { path: "mailto:uderdogs230402@gmail.com", title: "Contact" },
  ];

  return (
    // containerStyles giờ chỉ chứa các class cho desktop
    <nav className={cn(containerStyles)}>
      {navLinks.map((link) => {
        if (link.path.startsWith("mailto:")) {
          return (
            <a
              key={link.title}
              href={link.path}
              // Chỉ còn style cho desktop
              className={cn(
                "px-3 py-1.5 transition-colors duration-200 ease-in-out hover:bg-background/10 rounded"
              )}
              // Bỏ onClick
            >
              {link.title}
            </a>
          );
        }
        return (
          <NavLink
            key={link.title}
            to={link.path}
            // Chỉ còn style cho desktop và active state desktop
            className={({ isActive }) => cn(
              "px-3 py-1.5 transition-colors duration-200 ease-in-out hover:bg-background/10 rounded",
              isActive ? "bg-background/20 rounded" : "" // Active state cho desktop
            )}
            // Bỏ onClick
          >
            {link.title}
          </NavLink>
        );
      })}
    </nav>
  );
};

export default Navbar;
</file>

<file path="components/NewArrivals.jsx">
import React, { useContext, useEffect, useState, useRef } from "react";
import Title from "./Title";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import { Autoplay, Navigation } from "swiper/modules";
import Item from "./Item";
import { ShopContext } from "../context/ShopContext";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";

const NewArrivals = () => {
  const { products } = useContext(ShopContext);
  const [newArrivals, setNewArrivals] = useState([]);
  const swiperRef = useRef(null);

  useEffect(() => {
    const data = products.slice(-8);
    setNewArrivals(data);
  }, [products]);

  return (
    <section className="max-padd-container py-16">
      <div className="flex justify-between items-center mb-10">
        <Title
          title1={"New Arrivals"}
          paraStyles={"!block"}
        />
         <div className="flex gap-2">
           <Button
             variant="outline"
             size="icon"
             className="rounded-full"
             onClick={() => swiperRef.current?.swiper.slidePrev()}
           >
             <ChevronLeft className="h-4 w-4" />
             <span className="sr-only">Previous</span>
           </Button>
           <Button
             variant="outline"
             size="icon"
             className="rounded-full"
             onClick={() => swiperRef.current?.swiper.slideNext()}
           >
             <ChevronRight className="h-4 w-4" />
              <span className="sr-only">Next</span>
           </Button>
         </div>
      </div>

      <Swiper
        ref={swiperRef}
        autoplay={{
          delay: 5000,
          disableOnInteraction: false,
        }}
        loop={true}
        breakpoints={{
          300: { slidesPerView: 2, spaceBetween: 15 },
          640: { slidesPerView: 3, spaceBetween: 20 },
          768: { slidesPerView: 4, spaceBetween: 20 },
          1024: { slidesPerView: 5, spaceBetween: 30 },
        }}
        modules={[Autoplay, Navigation]}
        className="pb-4"
      >
        {newArrivals.map((product) => (
          <SwiperSlide key={product._id}>
            <Item product={product} className="h-full" />
          </SwiperSlide>
        ))}
      </Swiper>
    </section>
  );
};

export default NewArrivals;
</file>

<file path="components/NewsLetter.jsx">
import React from 'react'
import { FaDribbble, FaFacebookF, FaInstagram } from 'react-icons/fa6'


const NewsLetter = () => {
  return (
    <section className='max-padd-container border-t-[1px] border-b-[1px] border-primary py-4'>
      <div className='flexBetween flex-wrap gap-7'>
        <div>
          <h4 className='bold-14 uppercase tracking-wider'>Subscribe newsletter</h4>
          <p>Get latest information on Events, Sales & Offers.</p>
        </div>
        <div>
          <div className='flex bg-primary'>
            <input type="email" placeholder='Email Address' className='p-4 bg-primary w-[266px] outline-none text-[13px]'/>
            <button className='btn-dark !rounded-none !text-[13px] !font-bold uppercase'>Submit</button>
          </div>
        </div>
        <div className='flex gap-x-3 pr-14'>
          <div className='h-8 w-8 rounded-full hover:bg-tertiary hover:text-white flexCenter transition-all duration-500'><FaFacebookF /></div>
          <div className='h-8 w-8 rounded-full hover:bg-tertiary hover:text-white flexCenter transition-all duration-500'><FaInstagram /></div>
          <div className='h-8 w-8 rounded-full hover:bg-tertiary hover:text-white flexCenter transition-all duration-500'><FaDribbble /></div>
        </div>
      </div>
    </section>
  )
}

export default NewsLetter
</file>

<file path="components/OrderDetail.jsx">
import React, { useState } from "react";
import axios from "axios";
import ReviewModal from "./ReviewModal";
import ReviewList from "./ReviewList";

const OrderDetail = ({ order, backendUrl, token, currency }) => {
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showReviewModal, setShowReviewModal] = useState(false);
  const [localReviews, setLocalReviews] = useState({}); // lưu review theo product id

  const handleReceived = (product) => {
    setSelectedProduct(product);
    setShowReviewModal(true);
  };

  const handleReviewSubmit = async (productId, rating, reviewText) => {
    try {
      // Gọi API submit review
      const response = await axios.post(
        `${backendUrl}/api/review/submit`,
        { productId, rating, reviewText },
        { headers: { token } }
      );
      if (response.data.success) {
        setLocalReviews((prev) => ({
          ...prev,
          [productId]: { rating, reviewText },
        }));
        setShowReviewModal(false);
      } else {
        alert("Review submission failed: " + response.data.message);
      }
    } catch (error) {
      console.error(error);
      alert("Review submission error: " + error.message);
    }
  };

  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h2 className="text-2xl font-bold mb-4">Order Detail</h2>
      <p className="mb-2"><strong>Order ID:</strong> {order._id}</p>
      <p className="mb-2">
        <strong>Date:</strong> {new Date(order.date).toLocaleString()}
      </p>
      <p className="mb-4"><strong>Status:</strong> {order.status}</p>
      <div>
        <h3 className="text-xl font-bold mb-2">Items:</h3>
        {order.items.map((item) => (
          <div key={item._id} className="border p-4 mb-4 rounded flex gap-4">
            <img
              src={item.image[0]}
              alt={item.name}
              className="w-20 h-20 object-cover rounded"
            />
            <div className="flex-1">
              <p className="font-bold text-lg">{item.name}</p>
              <p className="text-sm">Quantity: {item.quantity}</p>
              <p className="text-sm">Color: {item.color}</p>
              <p className="text-sm">Price: {currency}{item.price}</p>
              {/* Nếu chưa review, hiển thị nút nhận hàng */}
              {!localReviews[item._id] && (
                <button
                  onClick={() => handleReceived(item)}
                  className="mt-2 btn-secondary"
                >
                  Đã nhận được hàng
                </button>
              )}
              {/* Hiển thị review từ local state nếu có */}
              {localReviews[item._id] && (
                <div className="mt-2 p-2 border-t">
                  <p className="text-sm">
                    <strong>Rating:</strong> {localReviews[item._id].rating} / 5
                  </p>
                  <p className="text-sm">
                    <strong>Review:</strong> {localReviews[item._id].reviewText}
                  </p>
                </div>
              )}
              {/* Hiển thị danh sách review từ API */}
              <ReviewList productId={item._id} backendUrl={backendUrl} token={token} />
            </div>
          </div>
        ))}
      </div>
      {showReviewModal && selectedProduct && (
        <ReviewModal
          product={selectedProduct}
          onClose={() => setShowReviewModal(false)}
          onSubmit={handleReviewSubmit}
        />
      )}
    </div>
  );
};

export default OrderDetail;
</file>

<file path="components/PopularProducts.jsx">
import React, { useContext, useEffect, useState } from "react";
import Title from "./Title";
import Item from "./Item";
import { ShopContext } from "../context/ShopContext";

const PopularProducts = () => {
  const [popularProducts, setPopularProducts] = useState([]);
  const { products } = useContext(ShopContext);

  useEffect(() => {
    const data = products.filter(item => item.popular);
    setPopularProducts(data.slice(0, 8));
  }, [products]);

  return (
    <section className="max-padd-container py-16">
      <Title
        title1={"Popular"}
        title2={"Products"}
        titleStyles={"pb-10 md:pb-14"}
        paraStyles={"!block"}
      />
      <div className="grid grid-cols-1 xs:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 md:gap-6">
        {popularProducts.map((product) => (
          <Item key={product._id} product={product} />
        ))}
      </div>
    </section>
  );
};

export default PopularProducts;
</file>

<file path="components/ProductCard.jsx">
// src/components/ProductCard.jsx (Simplified version)
import React, { useContext } from "react";
import { Link } from "react-router-dom";
import { ShopContext } from "../context/ShopContext";

const ProductCard = ({ product }) => {
    const { currency } = useContext(ShopContext);

    return (
        <div className="w-full max-w-sm bg-white border border-gray-200 rounded-lg shadow-md">
            <Link to={`/product/${product._id}`}>
                <img
                    className="p-8 rounded-t-lg h-64 w-full object-cover" // Maintain aspect ratio
                    src={product.image[0]}
                    alt={product.name}
                />
            </Link>
            <div className="px-5 pb-5">
                <Link to={`/product/${product._id}`}>
                    <h5 className="text-xl font-semibold tracking-tight text-gray-900">
                        {product.name}
                    </h5>
                </Link>
                <div className="flex items-center justify-between mt-2.5">
                    <span className="text-xl font-bold text-gray-900">
                        {currency === "USD"
                            ? `$${product.price}`
                            : `₫${(product.price * 24000).toLocaleString()}`}
                    </span>
                </div>
            </div>
        </div>
    );
};

export default ProductCard;
</file>

<file path="components/ProductDescription.jsx">
import React from "react";

const ProductDescription = () => {
  return (
    <div className="ring-1 ring-slate-900/10 rounded-lg">
      <div className="flex gap-3">
        <button className="medium-14 p-3 w-32 border-b-2 border-secondary">Description</button>
        <button className="medium-14 p-3 w-32">Care Guide</button>
        <button className="medium-14 p-3 w-32">Color Guide</button>
      </div>
      <hr className="h-[1px] w-full"/>
      <div className="flex flex-col gap-3 p-3">
        <div>
          <h5 className="h5">Detail</h5>
          <p className="text-sm">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae
            dicta adipisci nihil deserunt delectus? Dignissimos, numquam eum,
            voluptates reiciendis ipsa maxime enim quasi praesentium est totam
            neque dolores quam
          </p>
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Sed
            voluptatem magni cupiditate in voluptates non ea.
          </p>
        </div>
        <div>
          <h5 className="h5">Benefit</h5>
          <ul className="list-disc pl-5 text-sm text-gray-30 flex flex-col gap-1">
            <li>
              High-quality materials ensure long-lasting durability and comfort.
            </li>
            <li>Designed to meet the needs of modern, active lifestyles.</li>
            <li>Available in a wide range of colors and trendy colors.</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default ProductDescription;
</file>

<file path="components/ProductFeatures.jsx">
import React from 'react'
import { RiSecurePaymentLine } from 'react-icons/ri'
import { TbArrowBackUp, TbTruckDelivery } from 'react-icons/tb'

const ProductFeatures = () => {
  return (
    <div className='bg-primary rounded-xl mt-6'>
        <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-12 rounded-xl'>
            <div className='flexCenter gap-x-4 p-2 rounded-3xl'>
                <div className='text-3xl'><TbArrowBackUp className='mb-3 text-yellow-500'/></div>
                <div>
                    <h4 className='h4 capitalize'>Easy Return</h4>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem eaque corrupti asperiores animi, praesentium temporibus!</p>
                </div>
            </div>
            <div className='flexCenter gap-x-4 p-2 rounded-3xl'>
                <div className='text-3xl'><TbTruckDelivery className='mb-3 text-red-500'/></div>
                <div>
                    <h4 className='h4 capitalize'>Fast Delivery</h4>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem eaque corrupti asperiores animi, praesentium temporibus!</p>
                </div>
            </div>
            <div className='flexCenter gap-x-4 p-2 rounded-3xl'>
                <div className='text-3xl'><RiSecurePaymentLine className='mb-3 text-blue-500'/></div>
                <div>
                    <h4 className='h4 capitalize'>Secure Payment</h4>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem eaque corrupti asperiores animi, praesentium temporibus!</p>
                </div>
            </div>
        </div>
    </div>
  )
}

export default ProductFeatures
</file>

<file path="components/ProductItem.jsx">
// src/components/ProductItem.jsx
import React from "react";
import { TbPencil, TbTrash } from "react-icons/tb";

const ProductItem = ({ product, currency, onEdit, onDelete }) => {
  return (
    <div className="border p-4 rounded-lg relative">
      <h4 className="bold-18 mb-1">{product.name}</h4>
      <p className="medium-15 text-secondary">
        {currency}{product.price}.00
      </p>
      <p className="text-gray-600 mb-3">{product.description}</p>
      <div className="flex gap-2">
        <button onClick={() => onEdit(product)} className="btn-secondary rounded px-3 py-1 flex items-center gap-1">
          <TbPencil /> Edit
        </button>
        <button onClick={() => onDelete(product._id)} className="btn-white rounded px-3 py-1 text-red-500 flex items-center gap-1">
          <TbTrash /> Delete
        </button>
      </div>
    </div>
  );
};

export default ProductItem;
</file>

<file path="components/ProductsSection.jsx">
// src/components/ProductsSection.jsx
import React from "react";
import StoreProductItem from "./StoreProductItem"; // Component này cần được nâng cấp sau
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react"; // Icon cho nút Add

const ProductsSection = ({ products, currency, onEdit, onDelete, onCreate }) => {
  return (
    // Dùng Card của Shadcn làm container
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"> {/* Layout flex cho header */}
        <div className="space-y-1">
            <CardTitle>My Products</CardTitle>
            <CardDescription>Manage your store's inventory.</CardDescription>
        </div>
        {/* Nút Add Product dùng Button của Shadcn */}
        <Button size="sm" onClick={onCreate}>
           <PlusCircle className="mr-2 h-4 w-4" /> Add Product
        </Button>
      </CardHeader>
      <CardContent>
        {products.length > 0 ? (
          // Sửa lại grid columns cho hợp lý hơn
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6">
            {products.map((prod) => (
              // StoreProductItem nên được refactor để dùng Shadcn Card
              <StoreProductItem
                key={prod._id}
                product={prod}
                currency={currency}
                onEdit={onEdit}
                onDelete={onDelete}
              />
            ))}
          </div>
        ) : (
          // Thông báo khi không có sản phẩm
          <div className="flex flex-col items-center justify-center py-12 text-center">
             <h3 className="text-lg font-semibold text-muted-foreground">No products found</h3>
             <p className="text-sm text-muted-foreground mb-4">You haven't added any products yet.</p>
             <Button size="sm" onClick={onCreate}>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Your First Product
             </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default ProductsSection;
</file>

<file path="components/RelatedProducts.jsx">
import React, { useContext, useEffect, useState } from "react";
import Title from "./Title";
import { products } from "../assets/data";
import Item from "./Item";
import { ShopContext } from "../context/ShopContext";

const RelatedProducts = ({ category }) => {
  const { products } = useContext(ShopContext);
  const [relatedProducts, setRelatedProducts] = useState([]);

  useEffect(() => {
    if (products.length > 0) {
      let filtered = products.slice();
      filtered = filtered.filter((item) => category === item.category);

      setRelatedProducts(filtered.slice(0, 5))
    }
  }, [products]);

  return (
    <section className="py-16">
      <Title
        title1={"Related"}
        title2={"Products"}
        titleStyles={"pb-10"}
      />
      {/* CONTAINER */}
      <div className="grid grid-cols-1 xs:grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-8">
        {relatedProducts.map((product) => (
          <div key={product._id}>
            <Item product={product} />
          </div>
        ))}
      </div>
    </section>
  );
};

export default RelatedProducts;
</file>

<file path="components/ReviewList.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { FaStar, FaRegStar, FaStarHalfAlt } from "react-icons/fa"; // Import star icons

const ReviewList = ({ productId, backendUrl, token }) => {
  const [reviews, setReviews] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [reviewsPerPage] = useState(5); // Number of reviews per page
  const [loading, setLoading] = useState(true); // Add loading state
  const [error, setError] = useState(null);    // Add error state


  const fetchReviews = async () => {
    setLoading(true); // Set loading to true when fetching
    setError(null); // Clear any previous errors
    try {
      const response = await axios.get(
        `${backendUrl}/api/review/product/${productId}`,
        { headers: { token } }
      );
      if (response.data.success) {
        setReviews(response.data.reviews);
      } else {
          setError(response.data.message || "Failed to fetch reviews."); // Set error message

      }
    } catch (error) {
      console.error("Error fetching reviews:", error);
      setError("Failed to fetch reviews. Please try again later."); // Set user-friendly error
    } finally {
        setLoading(false); // Set loading to false after fetch completes (success or failure)
    }
  };

  useEffect(() => {
    if (productId) fetchReviews();
  }, [productId, backendUrl, token]);


    // Function to render star rating
    const renderStars = (rating) => {
        const stars = [];
        for (let i = 1; i <= 5; i++) {
            if (i <= rating) {
                stars.push(<FaStar key={i} className="text-yellow-400" />); // Filled star
            } else if (i - 0.5 === rating) {
                stars.push(<FaStarHalfAlt key={i} className="text-yellow-400" />); // Half star
            } else {
                stars.push(<FaRegStar key={i} className="text-yellow-400" />); // Empty star
            }
        }
        return stars;
    };


  // Get current reviews (for pagination)
  const indexOfLastReview = currentPage * reviewsPerPage;
  const indexOfFirstReview = indexOfLastReview - reviewsPerPage;
  const currentReviews = reviews.slice(indexOfFirstReview, indexOfLastReview);

  // Change page
  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  if (loading) {
    return <p className="text-gray-500 text-center">Loading reviews...</p>;
  }

  if (error) {
    return <p className="text-red-500 text-center">Error: {error}</p>;
  }

  if (!reviews || reviews.length === 0) {
    return <p className="text-gray-500 text-center">No reviews yet. Be the first to review!</p>;
  }


  return (
    <section className="mt-12">
      <h2 className="text-2xl font-bold mb-6">Customer Reviews</h2>
      <div className="space-y-6">
        {currentReviews.map((review) => (
          <div
            key={review._id}
            className="border rounded-lg p-4 bg-white shadow"
            role="listitem"
          >
            <div className="flex items-center gap-4 mb-3">
              <div className="w-10 h-10 rounded-full bg-gray-200 flex-shrink-0"></div>
              <div>
                <p className="font-semibold text-gray-900">
                  {review.userId ? `User ${review.userId.substring(0,6)}...` : "Anonymous User"}
                </p>
                <div className="flex items-center" aria-label={`Rating: ${review.rating} out of 5`}>
                  {renderStars(review.rating)}
                </div>
              </div>
            </div>
            <p className="text-gray-700 leading-relaxed">{review.reviewText}</p>
            <p className="text-sm text-gray-500 mt-2">
              {new Date(review.date).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
              })}
            </p>
          </div>
        ))}
      </div>

       {/* Pagination */}
       {reviews.length > reviewsPerPage && (
        <nav className="flex justify-center mt-8">
          <ul className="flex items-center gap-2">
            {Array.from({ length: Math.ceil(reviews.length / reviewsPerPage) }).map((_, index) => (
              <li key={index}>
                <button
                  onClick={() => paginate(index + 1)}
                  className={`px-4 py-2 rounded-full transition duration-200 ease-in-out ${
                    currentPage === index + 1
                      ? "bg-gray-900 text-white"
                      : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                  }`}
                >
                  {index + 1}
                </button>
              </li>
            ))}
          </ul>
        </nav>
      )}
    </section>
  );
};

export default ReviewList;
</file>

<file path="components/ReviewModal.jsx">
import React, { useState } from "react";

const ReviewModal = ({ product, onClose, onSubmit }) => {
  const [rating, setRating] = useState(0);
  const [reviewText, setReviewText] = useState("");

  const handleSubmit = () => {
    if (rating === 0 || reviewText.trim() === "") {
      alert("Please provide a rating and review.");
      return;
    }
    onSubmit(product._id, rating, reviewText);
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="bg-white p-6 rounded-xl w-[90%] max-w-md shadow-lg">
        <h3 className="text-2xl font-bold mb-4">Rate & Review</h3>
        <p className="mb-2">Product: <span className="font-bold">{product.name}</span></p>
        <div className="mb-4">
          <label className="block mb-1 font-medium">Rating (1-5):</label>
          <select
            value={rating}
            onChange={(e) => setRating(Number(e.target.value))}
            className="w-full p-2 border rounded"
          >
            <option value="0">Select rating</option>
            {[1, 2, 3, 4, 5].map((star) => (
              <option key={star} value={star}>
                {star}
              </option>
            ))}
          </select>
        </div>
        <div className="mb-4">
          <label className="block mb-1 font-medium">Review:</label>
          <textarea
            value={reviewText}
            onChange={(e) => setReviewText(e.target.value)}
            className="w-full p-2 border rounded"
            placeholder="Write your review here..."
          ></textarea>
        </div>
        <div className="flex justify-end gap-4">
          <button onClick={onClose} className="btn-white px-3 py-1 rounded shadow">
            Cancel
          </button>
          <button onClick={handleSubmit} className="btn-secondary px-3 py-1 rounded shadow">
            Submit
          </button>
        </div>
      </div>
    </div>
  );
};

export default ReviewModal;
</file>

<file path="components/Search.jsx">
import React, { useContext, useState } from 'react'
import { ShopContext } from '../context/ShopContext'
import {FaSearch} from "react-icons/fa"

const Search = () => {
    const {search, setSearch} = useContext(ShopContext)

  return (
    <div className='py-4 pb-7'>
        <div className='text-center'>
            <div className='inline-flex items-center justify-center px-3 py-1.5 rounded-full bg-white overflow-hidden w-full'>
                <input type="text" value={search} onChange={(e)=> setSearch(e.target.value)} placeholder='Search here...' className='border-none outline-none w-full bg-white text-sm' />
                <div>
                    <FaSearch className='cursor-pointer'/>
                </div>
            </div>
        </div>
    </div>
  )
}

export default Search
</file>

<file path="components/StoreInfoSection.jsx">
// src/components/StoreInfoSection.jsx
import React from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Save } from "lucide-react"; // Icon cho nút Save

const StoreInfoSection = ({ storeName, setStoreName, storeAddress, setStoreAddress, updateStoreInfo }) => {
  return (
    // Dùng Card của Shadcn làm container
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>Store Information</CardTitle>
        <CardDescription>Update your store's name and address.</CardDescription>
      </CardHeader>
      <CardContent>
        {/* Dùng form với các component Input, Label của Shadcn */}
        <form onSubmit={updateStoreInfo} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="storeName">Store Name</Label>
            <Input
              id="storeName"
              type="text"
              value={storeName}
              onChange={(e) => setStoreName(e.target.value)}
              placeholder="Enter store name"
              required // Thêm required nếu cần
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="storeAddress">Store Address</Label>
            <Input
              id="storeAddress"
              type="text"
              value={storeAddress}
              onChange={(e) => setStoreAddress(e.target.value)}
              placeholder="Enter store address"
              required // Thêm required nếu cần
            />
          </div>
          {/* Nút bấm dùng Button của Shadcn */}
          <Button type="submit" className="w-full sm:w-auto"> {/* width full trên mobile */}
             <Save className="mr-2 h-4 w-4" /> Update Store Info
          </Button>
        </form>
      </CardContent>
    </Card>
  );
};

export default StoreInfoSection;
</file>

<file path="components/StoreOrders.jsx">
import React, { useEffect, useState, useContext } from "react";
import axios from "axios";
import { ShopContext } from "../context/ShopContext";
// Bỏ Title vì dùng CardTitle
// import Title from "../components/Title";
import Footer from "../components/Footer";

// Import Shadcn UI components
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton"; // Thêm Skeleton cho loading

const StoreOrders = () => { // Có thể nhận props backendUrl, token nếu không dùng context trực tiếp
  const { backendUrl, token, storeInfo, currency } = useContext(ShopContext); // Lấy thêm currency
  const [orders, setOrders] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchStoreOrders = async () => {
    // Kiểm tra storeInfo._id trước khi fetch
    if (!storeInfo?._id) {
      // console.log("Store info not available yet.");
      // Không cần set lỗi ở đây vì useEffect sẽ chạy lại khi storeInfo có
      return;
    }
    setIsLoading(true);
    setError(null); // Reset lỗi trước mỗi lần fetch
    try {
      const response = await axios.get(
        `${backendUrl}/api/store-management/storeorders?storeId=${storeInfo._id}`,
        { headers: { token } }
      );
      if (response.data.success) {
        setOrders(response.data.orders);
      } else {
        console.error("Error fetching orders:", response.data.message);
        setError(response.data.message || "Failed to fetch orders.");
        setOrders([]); // Clear orders on error
      }
    } catch (err) {
      console.error("API call error:", err);
      setError(err.response?.data?.message || err.message || "An unexpected error occurred.");
      setOrders([]); // Clear orders on error
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    // Chỉ fetch khi có token và storeInfo._id
    if (token && storeInfo?._id) {
      fetchStoreOrders();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token, storeInfo?._id]); // Thêm storeInfo._id vào dependency array

  // Helper function để lấy variant cho Badge dựa trên status
  const getStatusBadgeVariant = (status) => {
    switch (status?.toLowerCase()) {
      case 'delivered':
        return 'success'; // Giả sử bạn có variant 'success' (màu xanh lá)
      case 'shipped':
        return 'default'; // Hoặc màu xanh dương
      case 'processing':
        return 'secondary'; // Màu xám hoặc vàng
      case 'cancelled':
        return 'destructive'; // Màu đỏ
      default:
        return 'outline'; // Mặc định
    }
  };


  return (
    // Bỏ max-padd-container và py-10 vì Card đã có padding riêng
    <Card>
      <CardHeader>
        <CardTitle>Store Orders</CardTitle>
        <CardDescription>View and manage recent orders for your store.</CardDescription>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          // --- Loading State ---
          <div className="space-y-2">
             <Skeleton className="h-10 w-full" />
             <Skeleton className="h-10 w-full" />
             <Skeleton className="h-10 w-full" />
          </div>
        ) : error ? (
           // --- Error State ---
           <p className="text-center text-destructive">Error loading orders: {error}</p>
        ) : orders.length > 0 ? (
          // --- Orders Table ---
          <Table>
            <TableCaption>A list of recent orders for your store.</TableCaption>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[150px]">Order ID</TableHead>
                <TableHead>User ID</TableHead> {/* Hoặc User Email nếu có */}
                <TableHead className="text-right">Amount</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Payment</TableHead>
                <TableHead>Date</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {orders.map((order) => (
                <TableRow key={order._id}>
                  <TableCell className="font-medium truncate w-[150px]">{order._id}</TableCell>
                  <TableCell>{order.userId}</TableCell> {/* Thay bằng order.user.email nếu có */}
                  <TableCell className="text-right">
                     {currency || '$'}{order.amount?.toFixed(2)}
                  </TableCell>
                  <TableCell>
                    <Badge variant={getStatusBadgeVariant(order.status)}>
                      {order.status || 'N/A'}
                    </Badge>
                  </TableCell>
                  <TableCell>{order.paymentMethod || 'N/A'}</TableCell>
                  <TableCell>{new Date(order.date).toLocaleString()}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        ) : (
          // --- No Orders State ---
          <p className="text-center text-muted-foreground py-10">No orders found for your store yet.</p>
        )}
      </CardContent>
      {/* Có thể thêm CardFooter nếu cần pagination hoặc actions tổng */}
      {/* <CardFooter>
          <p>Pagination controls here...</p>
      </CardFooter> */}

      {/* Footer có thể không cần thiết nếu đây là một tab content */}
      <Footer />
    </Card>
  );
};

export default StoreOrders;
</file>

<file path="components/StoreProductItem.jsx">
// src/components/StoreProductItem.jsx
import React, { useState } from "react";
import { Link } from "react-router-dom";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"; // Shadcn Card
import { Button } from "@/components/ui/button"; // Shadcn Button
import { FilePenLine, Trash2 } from "lucide-react"; // Shadcn/lucide icons
import { cn } from "@/lib/utils";

const StoreProductItem = ({ product, currency, onEdit, onDelete, className }) => {
  const [hovered, setHovered] = useState(false);

  // --- Loading/Error State ---
  if (!product || !product.image || product.image.length === 0) {
    return <Card className={cn("overflow-hidden group animate-pulse bg-gray-200 dark:bg-gray-800 h-96 rounded-lg", className)}></Card>; // Tăng chiều cao một chút cho phù hợp
  }

  return (
    // Sử dụng Card và các hiệu ứng hover tương tự Item.jsx
    <Card
      className={cn(
        "overflow-hidden group border border-transparent rounded-lg flex flex-col", // Thêm flex flex-col để footer luôn ở dưới
        "hover:shadow-lg hover:border-gray-200 dark:hover:border-gray-700",
        "hover:bg-gray-50/50 dark:hover:bg-gray-900/50",
        "transition-all duration-300 ease-in-out",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <CardHeader className="p-0 relative">
        <Link
          to={`/product/${product._id}`}
          className="aspect-square block overflow-hidden rounded-t-lg" // Giữ tỷ lệ vuông
        >
          <img
            src={
              product.image.length > 1 && hovered
                ? product.image[1]
                : product.image[0]
            }
            alt={product.name || "Product Image"}
            className="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105"
            loading="lazy"
          />
        </Link>
      </CardHeader>
      {/* Phần content chiếm không gian còn lại */}
      <CardContent className="p-3 space-y-1 flex-grow">
        {product.category && (
          <p className="text-xs text-muted-foreground uppercase tracking-wide">{product.category}</p>
        )}
        <h3 className="text-sm font-semibold line-clamp-2 text-foreground h-10">
          {product.name}
        </h3>
        {/* Có thể thêm mô tả ngắn nếu cần */}
        {/* <p className="text-xs text-muted-foreground line-clamp-2">{product.description}</p> */}
      </CardContent>
      {/* Footer chứa giá và các nút action */}
      <CardFooter className="p-3 flex justify-between items-center border-t border-border pt-3"> {/* Thêm border-t */}
        {/* Price */}
        <p className="text-base font-bold text-gray-900 dark:text-white">
           {currency || '$'}{product.price?.toFixed(2) || '0.00'}
        </p>

        {/* Edit & Delete Buttons */}
        <div className="flex gap-x-1.5">
          <Button
            variant="outline"
            size="icon" // Dùng size icon cho gọn
            className="h-8 w-8 border-gray-300 hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-800"
            onClick={() => onEdit(product)}
            aria-label="Edit product"
          >
            <FilePenLine className="h-4 w-4 text-gray-600 dark:text-gray-400" />
          </Button>
          <Button
            variant="ghost" // Dùng ghost để bớt nổi bật, kết hợp màu destructive
            size="icon"
            className="h-8 w-8 text-destructive hover:bg-destructive/10" // Màu chữ destructive, hover nền nhẹ
            onClick={() => onDelete(product._id)}
            aria-label="Delete product"
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </CardFooter>
    </Card>
  );
};

export default StoreProductItem;
</file>

<file path="components/Title.jsx">
import React from "react";

const Title = ({ title1, title2, titleStyles, title1Styles, paraStyles }) => {
  return (
    <div className={`${titleStyles}`}>
      <h2 className={`${title1Styles} h2`}>
        {title1}
        <span className="text-secondary !font-light underline"> {title2}</span>
      </h2>
      <p className={`${paraStyles} hidden`}>
        Discover the best deals on top-quality products, Crafted <br /> to elevate your
        everyday experience.
      </p>
    </div>
  );
};

export default Title;
</file>

<file path="components/ui/accordion.jsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}>
      {children}
      <ChevronDown
        className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}>
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="components/ui/alert.jsx">
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="components/ui/badge.jsx">
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  ...props
}) {
  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/button.jsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/card.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-xl border bg-card text-card-foreground shadow", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/checkbox.jsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}>
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="components/ui/dialog.jsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="components/ui/drawer.jsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props} />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}>
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props} />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="components/ui/dropdown-menu.jsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props} />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props} />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props} />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props} />)
  );
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="components/ui/input.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.jsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="components/ui/radio-group.jsx">
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (<RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />);
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>)
  );
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="components/ui/select.jsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="components/ui/separator.jsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef((
  { className, orientation = "horizontal", decorative = true, ...props },
  ref
) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props} />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="components/ui/skeleton.jsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    (<div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props} />)
  );
}

export { Skeleton }
</file>

<file path="components/ui/table.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="components/ui/tabs.jsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props} />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props} />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props} />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.jsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="context/ShopContext.jsx">
import React, { createContext, useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import axios from "axios";

export const ShopContext = createContext();

const ShopContextProvider = (props) => {
  const [search, setSearch] = useState("");
  const [products, setProducts] = useState([]);
  const [cartItems, setCartItems] = useState({});
  const [storeInfo, setStoreInfo] = useState(
    JSON.parse(localStorage.getItem("storeInfo")) || null 
  );
  const [token, setToken] = useState("");
  const [loading, setLoading] = useState(true);
  const [userNotifications, setUserNotifications] = useState([]);
  const backendUrl = import.meta.env.VITE_BACKEND_URL;
  const navigate = useNavigate();
  const currency = "$";
  const delivery_charges = 10;

  // Cập nhật thông tin store và lưu vào localStorage
  const updateStoreInfoContext = (data) => {
    setStoreInfo(data);
    localStorage.setItem("storeInfo", JSON.stringify(data));
  };

  // Hàm gọi API lấy thông tin store
  const getStoreInfo = async () => {
    try {
      if (token) {
        const response = await axios.get(
          `${backendUrl}/api/store/info`,
          { headers: { token } }
        );
        if (response.data.success) {
          updateStoreInfoContext(response.data.store);
        } else {
          toast.error(response.data.message);
        }
      }
    } catch (error) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "Error fetching store information"
      );
    }
  };
  

  // Gọi API lấy thông tin store mỗi khi token thay đổi
  useEffect(() => {
    if (token) {
      getStoreInfo();
    }
  }, [token]);

  // Auto logout sau 30 phút không hoạt động
  useEffect(() => {
    let timer;
    const resetTimer = () => {
      if (timer) clearTimeout(timer);
      timer = setTimeout(() => {
        setToken("");
        localStorage.removeItem("token");
        alert("Phiên làm việc của bạn đã hết. Vui lòng đăng nhập lại.");
        navigate("/login");
      }, 30 * 60 * 1000); // 30 phút
    };

    window.addEventListener("mousemove", resetTimer);
    window.addEventListener("keypress", resetTimer);
    resetTimer();

    return () => {
      window.removeEventListener("mousemove", resetTimer);
      window.removeEventListener("keypress", resetTimer);
      clearTimeout(timer);
    };
  }, [navigate]);

  // Hàm thêm sản phẩm vào giỏ hàng
  const addToCart = async (itemId, color) => {
    if (!color) {
      toast.error("Please select the color first");
      return;
    }
    let cartData = structuredClone(cartItems);
    if (cartData[itemId]) {
      if (cartData[itemId][color]) {
        cartData[itemId][color] += 1;
      } else {
        cartData[itemId][color] = 1;
      }
    } else {
      cartData[itemId] = {};
      cartData[itemId][color] = 1;
    }
    setCartItems(cartData);

    if (token) {
      try {
        await axios.post(
          backendUrl + "/api/cart/add",
          { itemId, color },
          { headers: { token } }
        );
      } catch (error) {
        console.log(error);
        toast.error(error.message);
      }
    }
  };

  // GETTING TOTAL CART COUNT
  const getCartCount = () => {
    let totalCount = 0;
    for (const items in cartItems) {
      for (const item in cartItems[items]) {
        try {
          if (cartItems[items][item] > 0) {
            totalCount += cartItems[items][item];
          }
        } catch (error) {}
      }
    }
    return totalCount;
  };

  // UPDATING THE QUANTITY OF CART ITEMS
  const updateQuantity = async (itemId, color, quantity) => {
    let cartData = structuredClone(cartItems);
    cartData[itemId][color] = quantity;
    setCartItems(cartData);

    if (token) {
      try {
        await axios.post(
          backendUrl + "/api/cart/update",
          { itemId, color, quantity },
          { headers: { token } }
        );
      } catch (error) {
        console.log(error);
        toast.error(error.message);
      }
    }
  };

  // GETTING TOTAL CART AMOUNT
  const getCartAmount = () => {
    let totalAmount = 0;
    for (const items in cartItems) {
      let itemInfo = products.find((product) => product._id === items);
      for (const item in cartItems[items]) {
        try {
          if (cartItems[items][item] > 0) {
            totalAmount += itemInfo.price * cartItems[items][item];
          }
        } catch (error) {
          console.log(error);
        }
      }
    }
    return totalAmount;
  };

  // Lấy danh sách sản phẩm (chạy 1 lần khi component mount)
  const getProductData = async () => {
    try {
      const response = await axios.get(backendUrl + "/api/product/list");
      if (response.data.success) {
        setProducts(response.data.products);
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  };

  // Lấy giỏ hàng của người dùng
  const getUserCart = async (token) => {
    try {
      const response = await axios.post(
        backendUrl + "/api/cart/get",
        {},
        { headers: { token } }
      );
      if (response.data.success) {
        setCartItems(response.data.cartData);
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  };

  // Effect chạy một lần khi component mount để kiểm tra token và lấy dữ liệu
  useEffect(() => {
    if (!token && localStorage.getItem("token")) {
      const savedToken = localStorage.getItem("token");
      setToken(savedToken);
      getUserCart(savedToken);
    }
    getProductData();
  }, []); // chạy 1 lần khi component mount

  const value = {
    navigate,
    products,
    search,
    setSearch,
    currency,
    delivery_charges,
    cartItems,
    setCartItems,
    addToCart,
    getCartCount,
    updateQuantity,
    getCartAmount,
    token,
    setToken,
    backendUrl,
    
    storeInfo, // lưu thông tin cửa hàng bao gồm storeId
  };

  return (
    <ShopContext.Provider value={value}>
      {props.children}
    </ShopContext.Provider>
  );
};

export default ShopContextProvider;
</file>

<file path="index.css">
@import url("https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Inter", system-ui;
}

/* width */
::-webkit-scrollbar {
  width: 10px;
}

/* Track */
::-webkit-scrollbar-track {
  background: white;
  border: 1px solid #8080802f;
}

/* Handle */
::-webkit-scrollbar-thumb {
  background: #e6e6e6;
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #ccc;
}

.shadows{
  box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
}

@layer base {
  .h1 {
    @apply text-[43px] leading-tight md:text-[51px] md:leading-[1.3] mb-4 font-bold;
  }

  .h2 {
    @apply text-[25px] leading-tight md:text-[35px] md:leading-[1.3] mb-4 font-bold;
  }

  .h3 {
    @apply text-[24px] leading-tight md:text-[28px] md:leading-[1.3] mb-4 font-bold;
  }

  .h4 {
    @apply text-[16px] md:text-[17px] mb-2 font-bold;
  }

  .h5 {
    @apply text-[14px] md:text-[15px] mb-1 font-bold;
  }

  p {
    @apply leading-[1.3] text-[14px] text-gray-30;
  }
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer utilities {
  .active-link {
    @apply px-3 py-2 rounded-full bg-black/80 text-white;
  }

  .btn-white {
    @apply medium-14 bg-white text-tertiary ring-1 ring-white px-7 py-2.5 rounded-full;
  }

  .btn-dark {
    @apply medium-14 bg-tertiary text-white ring-1 ring-tertiary px-7 py-2.5 rounded-full;
  }

  .btn-light {
    @apply medium-14 bg-primary ring-1 ring-primary px-7 py-2.5 rounded-full transition-all duration-300;
  }

  .btn-outline {
    @apply medium-14 bg-white ring-1 ring-primary px-7 py-2.5 rounded-full hover:bg-primary transition-all duration-300;
  }

  .btn-secondary {
    @apply medium-14 bg-secondary ring-1 ring-secondary text-white px-7 py-2.5 rounded-full;
  }

  .max-padd-container {
    @apply mx-auto max-w-[1440px] px-6 lg:px-12;
  }

  .flexCenter {
    @apply flex items-center justify-center;
  }

  .flexBetween {
    @apply flex items-center justify-between;
  }

  .flexStart {
    @apply flex items-center justify-start;
  }

  .flexEnd {
    @apply flex items-center justify-end;
  }

  /* FONTS */
  .regular-64 {
    @apply text-[64px] font-[400] leading-[120%];
  }

  .regular-52 {
    @apply text-[52px] font-[400] leading-[120%];
  }

  .regular-48 {
    @apply text-[48px] font-[400] leading-[120%];
  }

  .regular-40 {
    @apply text-[40px] font-[400] leading-[120%];
  }

  .regular-32 {
    @apply text-[32px] font-[400];
  }

  .regular-28 {
    @apply text-[28px] font-[400];
  }

  .regular-24 {
    @apply text-[24px] font-[400];
  }

  .regular-22 {
    @apply text-[22px] font-[400];
  }

  .regular-20 {
    @apply text-[20px] font-[400];
  }

  .regular-18 {
    @apply text-[18px] font-[400];
  }

  .regular-16 {
    @apply text-[16px] font-[400];
  }

  .regular-15 {
    @apply text-[15px] font-[400];
  }

  .regular-14 {
    @apply text-[14px] font-[400];
  }

  .medium-64 {
    @apply text-[64px] font-[500] leading-[120%];
  }

  .medium-52 {
    @apply text-[52px] font-[500] leading-[120%];
  }

  .medium-48 {
    @apply text-[48px] font-[500] leading-[120%];
  }

  .medium-40 {
    @apply text-[40px] font-[500] leading-[120%];
  }

  .medium-36 {
    @apply text-[36px] font-[500];
  }

  .medium-32 {
    @apply text-[32px] font-[500];
  }

  .medium-28 {
    @apply text-[28px] font-[500];
  }

  .medium-24 {
    @apply text-[24px] font-[500];
  }

  .medium-22 {
    @apply text-[22px] font-[500];
  }

  .medium-20 {
    @apply text-[20px] font-[500];
  }

  .medium-18 {
    @apply text-[18px] font-[500];
  }

  .medium-16 {
    @apply text-[16px] font-[500];
  }

  .medium-15 {
    @apply text-[15px] font-[500];
  }

  .medium-14 {
    @apply text-[14px] font-[500];
  }

  .bold-88 {
    @apply text-[88px] font-[700] leading-[120%];
  }

  .bold-64 {
    @apply text-[64px] font-[700] leading-[120%];
  }

  .bold-52 {
    @apply text-[52px] font-[700] leading-[120%];
  }

  .bold-48 {
    @apply text-[48px] font-[700] leading-[120%];
  }

  .bold-44 {
    @apply text-[44px] font-[700] leading-[120%];
  }

  .bold-40 {
    @apply text-[40px] font-[700] leading-[120%];
  }

  .bold-36 {
    @apply text-[36px] font-[700] leading-[120%];
  }

  .bold-32 {
    @apply text-[32px] font-[700] leading-[120%];
  }

  .bold-28 {
    @apply text-[28px] font-[700] leading-[120%];
  }

  .bold-24 {
    @apply text-[24px] font-[700] leading-[120%];
  }

  .bold-22 {
    @apply text-[22px] font-[700];
  }

  .bold-20 {
    @apply text-[20px] font-[700];
  }

  .bold-18 {
    @apply text-[18px] font-[700];
  }

  .bold-16 {
    @apply text-[16px] font-[700];
  }

  .bold-15 {
    @apply text-[15px] font-[700];
  }
  .bold-14 {
    @apply text-[14px] font-[700];
  }
}



@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="lib/utils.js">
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}
</file>

<file path="main.jsx">
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import App from "./App.jsx";
import { BrowserRouter } from "react-router-dom";
import ShopContextProvider from "./context/ShopContext.jsx";

createRoot(document.getElementById("root")).render(
  <BrowserRouter>
    <ShopContextProvider>
      <App />
    </ShopContextProvider>
  </BrowserRouter>
);
</file>

<file path="pages/Blog.jsx">
import React from "react";
import { blogs } from "../assets/data";
import Footer from "../components/Footer";

const Blog = () => {
  return (
    <div>
      <div className="bg-primary mb-16 pb-16">
        <div className="max-padd-container py-10">
          {/* CONTAINER */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 gap-y-12 pt-6">
            {blogs.map((blog) => (
              <div key={blog.title} className="relative">
                <img src={blog.image} alt="blogImg" className="rounded-xl" />
                {/* INFO */}
                <p className="medium-14 mt-6">{blog.category}</p>
                <h5 className="h5 pr-4 mb-1">{blog.title}</h5>
                <p>
                  Lorem ipsum dolor sit, amet consectetur adipisicing elit.
                  Aliquid, iusto natus!
                </p>
                <button className="underline mt-2 bold-14">
                  continue reading
                </button>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      <Footer />
    </div>
  );
};

export default Blog;
</file>

<file path="pages/Cart.jsx">
import React, { useContext, useMemo } from "react";
import { Link } from "react-router-dom"; // For empty cart link
import { ShopContext } from "../context/ShopContext";
import CartTotal from "../components/CartTotal"; // Use the refactored CartTotal
import Footer from "../components/Footer";

// Import Shadcn UI components
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Minus, Plus, X } from "lucide-react"; // Use lucide-react icons
import { Badge } from "@/components/ui/badge"; // Optional: for item count

const Cart = () => {
  const { products, currency, cartItems, getCartCount, updateQuantity } =
    useContext(ShopContext);

  // --- Simplified Data Processing using useMemo ---
  const flattenedCart = useMemo(() => {
    if (!products || products.length === 0) return []; // Guard clause if products aren't loaded

    return Object.entries(cartItems)
      .flatMap(([productId, colors]) =>
        Object.entries(colors)
          .filter(([, quantity]) => quantity > 0) // Only items with quantity > 0
          .map(([color, quantity]) => {
            const product = products.find((p) => p._id === productId);
            // Return null if product not found, filter out later
            if (!product) return null;
            return {
              key: `${productId}-${color}`, // Unique key for React map
              productId,
              color,
              quantity,
              product, // Include full product data
            };
          })
      )
      .filter((item) => item !== null); // Filter out any items where product wasn't found
  }, [cartItems, products]);

  // Helper to format currency
  const formatCurrency = (amount) => {
    return `${currency || "$"}${amount?.toFixed(2) || "0.00"}`;
  };

  // --- Event Handlers (directly call context update) ---
  const handleIncrement = (productId, color) => {
    const currentQuantity = cartItems[productId]?.[color] || 0;
    updateQuantity(productId, color, currentQuantity + 1);
  };

  const handleDecrement = (productId, color) => {
    const currentQuantity = cartItems[productId]?.[color] || 0;
    if (currentQuantity > 1) {
      updateQuantity(productId, color, currentQuantity - 1);
    } else {
      // Optional: Remove item if quantity becomes 0 or less
      // updateQuantity(productId, color, 0);
    }
  };

  const handleRemove = (productId, color) => {
    updateQuantity(productId, color, 0); // Set quantity to 0 to remove
  };


  const cartItemCount = getCartCount(); // Get total item count

  return (
    <section className="min-h-screen"> {/* Ensure section takes at least screen height */}
      {/* Removed the top bg-primary section for a cleaner look */}
      <div className="max-padd-container py-12 md:py-16"> {/* Standard padding */}
        {/* --- Page Header --- */}
        <div className="mb-8 flex items-center justify-between gap-4">
          <h1 className="text-3xl font-bold">Shopping Cart</h1>
          {cartItemCount > 0 && (
             <Badge variant="outline" className="text-base px-3 py-1">
                {cartItemCount} Item{cartItemCount !== 1 ? 's' : ''}
             </Badge>
          )}
        </div>

        {flattenedCart.length > 0 ? (
          // --- Main Cart Layout (Table + Summary) ---
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-12 items-start">
            {/* --- Cart Items Table (Takes 2 columns on large screens) --- */}
            <div className="lg:col-span-2">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[100px] sm:w-[150px]">Product</TableHead>
                    <TableHead>Details</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead className="text-center">Quantity</TableHead>
                    <TableHead className="text-right">Total</TableHead>
                    <TableHead className="w-[50px]"> {/* For Remove button */} </TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {flattenedCart.map((item) => (
                    <TableRow key={item.key}>
                      {/* Product Image */}
                      <TableCell>
                        <img
                          src={item.product.image?.[0]}
                          alt={item.product.name}
                          className="w-16 h-16 object-cover rounded-md aspect-square"
                        />
                      </TableCell>
                      {/* Product Details */}
                      <TableCell className="font-medium">
                        <div className="flex flex-col">
                           <span className="line-clamp-2">{item.product.name}</span>
                           <span className="text-xs text-muted-foreground capitalize">
                              Color: {item.color}
                           </span>
                        </div>
                      </TableCell>
                      {/* Price */}
                      <TableCell>{formatCurrency(item.product.price)}</TableCell>
                      {/* Quantity */}
                      <TableCell>
                         <div className="flex items-center justify-center gap-1 border border-border rounded-md p-1 w-fit mx-auto">
                            <Button
                               variant="ghost"
                               size="icon"
                               className="h-7 w-7 text-muted-foreground hover:bg-gray-100 dark:hover:bg-gray-800"
                               onClick={() => handleDecrement(item.productId, item.color)}
                               disabled={item.quantity <= 1} // Disable if quantity is 1
                            >
                               <Minus className="h-4 w-4" />
                            </Button>
                            <span className="w-8 text-center text-sm font-medium">
                               {item.quantity}
                            </span>
                            <Button
                               variant="ghost"
                               size="icon"
                               className="h-7 w-7 text-muted-foreground hover:bg-gray-100 dark:hover:bg-gray-800"
                               onClick={() => handleIncrement(item.productId, item.color)}
                            >
                               <Plus className="h-4 w-4" />
                            </Button>
                         </div>
                      </TableCell>
                      {/* Total Price per Item */}
                      <TableCell className="text-right">
                        {formatCurrency(item.product.price * item.quantity)}
                      </TableCell>
                      {/* Remove Button */}
                      <TableCell>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8 text-muted-foreground hover:text-destructive hover:bg-destructive/10"
                          onClick={() => handleRemove(item.productId, item.color)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>

            {/* --- Cart Summary (Takes 1 column on large screens) --- */}
            <div className="lg:col-span-1">
              {/* Use the refactored CartTotal component */}
              <CartTotal />
              {/* The Checkout button is now inside CartTotal */}
            </div>
          </div>
        ) : (
          // --- Empty Cart View ---
          <div className="text-center py-20 flex flex-col items-center">
            <h2 className="text-2xl font-semibold mb-2">Your Cart is Empty</h2>
            <p className="text-muted-foreground mb-6">Looks like you haven't added anything to your cart yet.</p>
            <Button asChild>
               <Link to="/">Start Shopping</Link>
            </Button>
          </div>
        )}
      </div>

      <Footer />
    </section>
  );
};

export default Cart;
</file>

<file path="pages/Collection.jsx">
import React, { useContext, useEffect, useState } from "react";
import { FaChevronLeft, FaChevronRight } from 'react-icons/fa'; // Icons remain useful

// Import Shadcn UI components (adjust paths based on your setup)
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

// Your existing imports
import Search from "../components/Search"; // Assuming Search might use shadcn/ui Input internally
import { ShopContext } from "../context/ShopContext";
import Item from "../components/Item"; // Assuming Item is styled, potentially using shadcn/ui Card

const Collection = () => {
  const { products, search } = useContext(ShopContext);
  const [category, setCategory] = useState([]);
  const [sortType, setSortType] = useState("relevant");
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 12; // Adjust items per page

  // --- Filtering and Sorting Logic (NO CHANGES NEEDED HERE) ---
  const toggleFilter = (value, setState) => {
    setState((prev) =>
      prev.includes(value)
        ? prev.filter((item) => item !== value)
        : [...prev, value]
    );
  };

  const applyFilter = () => {
    let filtered = [...products];
    if (search) {
      filtered = filtered.filter((product) =>
        product.name.toLowerCase().includes(search.toLowerCase())
      );
    }
    if (category.length) {
      filtered = filtered.filter((product) =>
        category.includes(product.category)
      );
    }
    return filtered;
  };

  const applySorting = (productList) => {
    const sortedList = productList.slice();
    switch (sortType) {
      case "low":
        return sortedList.sort((a, b) => a.price - b.price);
      case "high":
        return sortedList.sort((a, b) => b.price - a.price);
      default:
        return sortedList;
    }
  };

  useEffect(() => {
    let filtered = applyFilter();
    let sorted = applySorting(filtered);
    setFilteredProducts(sorted);
    setCurrentPage(1);
  }, [category, sortType, products, search]);
  // --- End Filtering/Sorting Logic ---

  const getPaginatedProducts = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return filteredProducts.slice(startIndex, endIndex);
  };

  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);

  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
        setCurrentPage(newPage);
        window.scrollTo(0, 0);
    }
  };

  // Helper function to generate unique IDs for checkboxes
  const generateCheckboxId = (cat) => `category-${cat.replace(/\s+/g, '-')}`;

  return (
    <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
      <div className="flex flex-col lg:flex-row gap-8">

        {/* --- FILTERS SIDEBAR (Using Shadcn Card) --- */}
        <aside className="lg:w-1/4 xl:w-1/5 lg:sticky lg:top-20 lg:h-[calc(100vh-10rem)] lg:overflow-y-auto p-1 space-y-6">
          {/* Search */}
          <div className="mb-4"> {/* Add margin bottom to search if needed */}
              <Search />
          </div>


          {/* Categories Filter */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Categories</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {[
                "Headphones",
                "Cameras",
                "Mobiles",
                "Speakers",
                "Mouse",
                "Watches",
              ].map((cat) => {
                const checkboxId = generateCheckboxId(cat);
                return (
                  <div key={cat} className="flex items-center space-x-3">
                    <Checkbox
                      id={checkboxId}
                      checked={category.includes(cat)}
                      onCheckedChange={(checked) => {
                        // checked can be boolean or 'indeterminate'
                        if (checked === true) {
                          toggleFilter(cat, setCategory);
                        } else if (checked === false) {
                          toggleFilter(cat, setCategory); // Call toggle again to remove
                        }
                      }}
                    />
                    <Label
                      htmlFor={checkboxId}
                      className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                    >
                      {cat}
                    </Label>
                  </div>
                );
              })}
            </CardContent>
          </Card>

          {/* Sort By Filter (Using Shadcn Select) */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Sort By</CardTitle>
            </CardHeader>
            <CardContent>
              <Select value={sortType} onValueChange={setSortType}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select sorting" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="relevant">Relevant</SelectItem>
                  <SelectItem value="low">Price: Low to High</SelectItem>
                  <SelectItem value="high">Price: High to Low</SelectItem>
                </SelectContent>
              </Select>
            </CardContent>
          </Card>
        </aside>

        {/* --- PRODUCTS GRID & PAGINATION --- */}
        <main className="lg:w-3/4 xl:w-4/5">
          {/* Product Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {getPaginatedProducts().length > 0 ? (
              getPaginatedProducts().map((product) => (
                <Item key={product._id} product={product} />
              ))
            ) : (
              <div className="col-span-full text-center py-10">
                <p className="text-muted-foreground text-lg"> {/* Use shadcn muted color */}
                  No products found matching your filters.
                </p>
              </div>
            )}
          </div>

          {/* --- PAGINATION (Using Shadcn Button) --- */}
          {totalPages > 1 && (
             <div className="flex justify-center items-center mt-14 mb-10 space-x-2">
               {/* Previous Button */}
               <Button
                 variant="outline"
                 size="icon" // Make it square for icon
                 disabled={currentPage === 1}
                 onClick={() => handlePageChange(currentPage - 1)}
                 aria-label="Previous page"
               >
                  <FaChevronLeft className="h-4 w-4" />
               </Button>

               {/* Page Number Buttons */}
               {Array.from({ length: totalPages }, (_, index) => (
                 <Button
                   key={index + 1}
                   onClick={() => handlePageChange(index + 1)}
                   variant={currentPage === index + 1 ? "default" : "outline"} // "default" likely your black button
                   size="icon" // Make it square
                   aria-current={currentPage === index + 1 ? 'page' : undefined}
                 >
                   {index + 1}
                 </Button>
               ))}

               {/* Next Button */}
               <Button
                 variant="outline"
                 size="icon" // Make it square
                 disabled={currentPage === totalPages}
                 onClick={() => handlePageChange(currentPage + 1)}
                 aria-label="Next page"
               >
                 <FaChevronRight className="h-4 w-4" />
               </Button>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Collection;
</file>

<file path="pages/Home.jsx">
import React from "react";
import Hero from "../components/Hero";
import Features from "../components/Features";
import NewArrivals from "../components/NewArrivals";
import PopularProducts from "../components/PopularProducts";
import Banner from "../components/Banner";
import About from "../components/About";
import NewsLetter from "../components/NewsLetter";
import Footer from "../components/Footer";
import Blog from "../components/Blog";

const Home = () => {
  return (
    <>
      <Hero />
      {/* <Features /> */}
      <NewArrivals />
      <PopularProducts />
      {/* <Banner /> */}
      {/* <About /> */}
      {/* <Blog /> */}
      {/* <NewsLetter /> */}
      <Footer />
    </>
  );
};

export default Home;
</file>

<file path="pages/Login.jsx">
import React, { useContext, useEffect, useState } from "react";
import login from "../assets/login.png";
import { ShopContext } from "../context/ShopContext";
import axios from "axios";
import { toast } from "react-toastify";

const Login = () => {
  const [currState, setCurrState] = useState("Login");
  const { token, setToken, navigate, backendUrl } = useContext(ShopContext);

  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const onSubmitHandler = async (event) => {
    event.preventDefault();
    try {
      if (currState === "Sign Up") {
        const response = await axios.post(backendUrl + "/api/user/register", {
          name,
          email,
          password,
        });
        if (response.data.success) {
          setToken(response.data.token);
          localStorage.setItem("token", response.data.token);
        } else {
          toast.error(response.data.message);
        }
      } else {
        const response = await axios.post(backendUrl + "/api/user/login", {
          email,
          password,
        });
        if (response.data.success) {
          setToken(response.data.token);
          localStorage.setItem("token", response.data.token);
        } else {
          toast.error(response.data.message);
        }
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  };

  useEffect(() => {
    if (token) {
      navigate("/");
    }
  }, [token]);

  return (
    <div className="absolute top-0 left-0 h-full w-full z-50 bg-white">
      {/* CONTAINER */}
      <div className="flex h-full w-full">
        {/* IMAGE SIDE */}
        <div className="w-1/2 hidden sm:block">
          <img
            src={login}
            alt="loginImg"
            className="object-cover h-full w-full"
          />
        </div>
        {/* FORM SIDE */}
        <div className="flexCenter w-full sm:w-1/2 text-[90%]">
          <form
            onSubmit={onSubmitHandler}
            className="flex flex-col items-center w-[90%] sm:max-w-md m-auto gap-y-5"
          >
            <div className="w-full mb-4">
              <h3 className="bold-36">{currState}</h3>
            </div>
            {currState === "Sign Up" && (
              <div className="w-full">
                <label htmlFor="name" className="medium-15">
                  Name
                </label>
                <input
                  onChange={(e) => setName(e.target.value)}
                  value={name}
                  type="text"
                  placeholder="Name"
                  className="w-full px-3 py-1.5 ring-1 ring-slate-900/5 rounded bg-primary mt-1"
                />
              </div>
            )}
            <div className="w-full">
              <label htmlFor="email" className="medium-15">
                Email
              </label>
              <input
                onChange={(e) => setEmail(e.target.value)}
                value={email}
                type="email"
                placeholder="Email"
                className="w-full px-3 py-1.5 ring-1 ring-slate-900/5 rounded bg-white mt-1"
              />
            </div>
            <div className="w-full">
              <label htmlFor="password" className="medium-15">
                Password
              </label>
              <input
                onChange={(e) => setPassword(e.target.value)}
                value={password}
                type="password"
                placeholder="Password"
                className="w-full px-3 py-1.5 ring-1 ring-slate-900/5 rounded bg-white mt-1"
              />
            </div>
            <button
              type="submit"
              className="btn-dark w-full mt-5 !py-[8px] !rounded"
            >
              {currState === "Sign Up" ? "Sign Up" : "Login"}
            </button>
            <div className="w-full flex flex-col gap-y-3">
              {currState === "Login" ? (
                <>
                  <div className="underline medium-15">
                    Forgot your password?
                  </div>
                  <div className="underline medium-15">
                    Don't have an account?
                    <span
                      onClick={() => setCurrState("Sign Up")}
                      className="cursor-pointer pl-1"
                    >
                      Create account
                    </span>
                  </div>
                </>
              ) : (
                <div className="underline medium-15 cursor-pointer">
                  Already have an account?
                  <span
                    onClick={() => setCurrState("Login")}
                    className="cursor-pointer pl-1"
                  >
                    Login
                  </span>
                </div>
              )}
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="pages/OrderDetailsPage.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import OrderDetail from "../components/OrderDetail";
import Footer from "../components/Footer";
import { toast } from "react-toastify";

const OrderDetailsPage = () => {
  const { orderId } = useParams();
  const [order, setOrder] = useState(null);

  const fetchOrderDetail = async () => {
    try {
      const response = await axios.get(`/api/order/details?orderId=${orderId}`);
      if (response.data.success) {
        setOrder(response.data.order);
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(error.message);
    }
  };

  useEffect(() => {
    if (orderId) fetchOrderDetail();
  }, [orderId]);

  return (
    <div>
      {order ? <OrderDetail order={order} /> : <p className="text-center">Loading...</p>}
      <Footer />
    </div>
  );
};

export default OrderDetailsPage;
</file>

<file path="pages/OrderFailed.jsx">
import React from "react";
import { Link } from "react-router-dom";
import Footer from "../components/Footer";
import Title from "../components/Title";

const OrderFailed = () => {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-red-100">
      <div className="max-w-lg bg-white p-6 rounded shadow-md">
        <Title 
          title1="Thanh toán" 
          title2="Thất bại" 
          titleStyles="text-center text-2xl font-bold" 
        />
        <p className="text-center mt-4 text-lg text-red-700">
          Thanh toán không thành công. Vui lòng thử lại hoặc liên hệ hỗ trợ.
        </p>
        <div className="mt-6 flex justify-center gap-4">
          <Link to="/place-order" className="btn-secondary">
            Thử lại thanh toán
          </Link>
          <Link to="/contact" className="btn-secondary">
            Liên hệ hỗ trợ
          </Link>
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default OrderFailed;
</file>

<file path="pages/Orders.jsx">
import React, { useContext, useEffect, useState, useCallback } from "react";
import { Link } from "react-router-dom";
import axios from "axios";

// Context
import { ShopContext } from "../context/ShopContext"; // Assuming ShopContext provides token, backendUrl

// UI Components (Shadcn/ui or equivalent)
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
    Drawer,
    DrawerContent,
    DrawerHeader,
    DrawerTitle,
    DrawerDescription,
    DrawerFooter, // Keep if needed, otherwise remove
    DrawerClose,
} from "@/components/ui/drawer";

// Icons (from lucide-react)
import {
    AlertCircle,
    PackageSearch, // Not used in the final code, consider removing if not needed elsewhere
    ShoppingBag,
    ArrowRight,
    Package,
    // User, // Not used directly in this cleaned version, needed if showing user info
    CreditCard,
    MapPin,
    X,
    CalendarDays,
    Hourglass,
    CheckCircle,
    XCircle,
} from "lucide-react";

// Components
import Footer from "../components/Footer";

// Utilities (Assume these are defined elsewhere and imported)
import {
    formatCurrency,
    formatDate,
    getStatusBadgeVariant, // Maps order status to badge variant ('default', 'destructive', 'outline', 'secondary', 'success', 'warning')
} from "../utils/helpers"; // Example path

// --- Custom Timeline Components (Consider extracting to separate files) ---

const Timeline = ({ children }) => (
    <div className="relative pl-6 sm:pl-8">{children}</div>
);

const TimelineItem = ({ children, isLast }) => (
    <div
        className={`relative pb-8 ${
            !isLast
                ? "after:absolute after:top-5 after:left-[calc(0.375rem-1px)] sm:after:left-[calc(0.5rem-1px)] after:w-0.5 after:h-full after:bg-border"
                : ""
        }`}
    >
        {children}
    </div>
);

const TimelineDot = ({ icon, status }) => {
    // Determine background color based on status using the badge variant logic for consistency
    const variant = getStatusBadgeVariant(status);
    let bgColor = "bg-gray-400"; // Default
    if (variant === "success") bgColor = "bg-green-500";
    else if (variant === "destructive") bgColor = "bg-red-500";
    else if (variant === "warning") bgColor = "bg-yellow-500";
    else if (variant === "processing" || status?.toLowerCase() === 'processing' || status?.toLowerCase() === 'out for delivery') bgColor = "bg-blue-500";
    else if (variant === "secondary" || variant === 'default') bgColor = 'bg-gray-500'; // Adjust as needed

    return (
        <div
            className={`absolute top-1 -left-1.5 sm:-left-2 z-10 w-7 h-7 sm:w-8 sm:h-8 rounded-full flex items-center justify-center ring-4 ring-background ${bgColor}`}
        >
            {icon || <div className="w-2 h-2 bg-white rounded-full"></div>}
        </div>
    );
};

const TimelineContent = ({ children }) => (
    <div className="ml-4 sm:ml-6">{children}</div>
);

// --- Helper to get Status Icon ---
const getStatusIcon = (status) => {
    const lowerStatus = String(status || "").toLowerCase().trim();
    const iconClass = "w-4 h-4 text-white";

    if (lowerStatus === "delivered") return <CheckCircle className={iconClass} />;
    if (lowerStatus === "cancelled" || lowerStatus === "failed") return <XCircle className={iconClass} />;
    if (lowerStatus === "processing" || lowerStatus === "out for delivery") return <Hourglass className={`${iconClass} animate-spin-slow`} />; // Assumes animate-spin-slow is defined in CSS/Tailwind config
    if (lowerStatus === "paid" || lowerStatus === "order placed") return <Package className={iconClass} />;
    return <CalendarDays className={iconClass} />; // Default
};


// --- Order Summary Card Component ---
const OrderSummaryCard = React.memo(({ order, onSelectOrder, currencySymbol }) => (
    <div className="bg-card border rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden">
        <div className="p-4 sm:p-5">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-3">
                {/* Info Left */}
                <div className="space-y-1">
                    <p className="text-xs text-muted-foreground">
                        {formatDate(order.date)}
                    </p>
                    <h3 className="text-base sm:text-lg font-semibold text-foreground">
                        Order #{order._id.slice(-6)}{" "}
                        {/* Using last 6 chars for a shorter ID */}
                    </h3>
                    <Badge
                        variant={getStatusBadgeVariant(order.status)}
                        size="sm"
                        className="capitalize !mt-1.5" // !important might be needed depending on specificity
                    >
                        {order.status || "Unknown"}
                    </Badge>
                </div>

                {/* Info Right & Action */}
                <div className="flex flex-col items-start sm:items-end gap-2">
                    <p className="text-lg font-bold text-primary">
                        {formatCurrency(order.amount, currencySymbol)}
                    </p>
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={() => onSelectOrder(order)}
                    >
                        View Details <ArrowRight className="ml-1 h-4 w-4" />
                    </Button>
                </div>
            </div>

            {/* Optional: Small product image previews */}
            {order.items && order.items.length > 0 && (
                <div className="mt-3 pt-3 border-t flex space-x-2 overflow-x-auto">
                    {order.items.slice(0, 4).map((item, idx) => (
                        <img
                            key={item._id || idx} // Use item._id if available, fallback to index
                            src={item.image?.[0] || "/placeholder-image.png"} // Use placeholder if no image
                            alt={item.name || "Product"}
                            className="w-10 h-10 rounded object-cover border flex-shrink-0 bg-muted"
                            loading="lazy"
                            onError={(e) => {
                                e.target.onerror = null; // Prevent infinite loop if placeholder fails
                                e.target.src = "/placeholder-image.png";
                            }}
                        />
                    ))}
                    {order.items.length > 4 && (
                        <span className="text-xs self-center text-muted-foreground ml-1">
                            +{order.items.length - 4} more
                        </span>
                    )}
                </div>
            )}
        </div>
    </div>
));

// --- Order Details Drawer Component ---
const OrderDetailsDrawer = ({ order, isOpen, onClose, currencySymbol }) => {
    if (!order) return null;

    return (
        <Drawer
            open={isOpen}
            onOpenChange={(open) => !open && onClose()}
            direction="right"
        >
            <DrawerContent className="h-full w-full max-w-lg outline-none">
                {" "}
                {/* Adjust width as needed */}
                <DrawerHeader className="border-b p-4">
                    <DrawerTitle className="text-xl font-semibold flex items-center gap-2">
                        <Package className="w-5 h-5 text-primary" /> Order Details
                    </DrawerTitle>
                    <DrawerDescription>
                        Order #{order._id}{" "}
                        <Badge
                            variant={getStatusBadgeVariant(order.status)}
                            className="ml-2 capitalize"
                        >
                            {order.status}
                        </Badge>
                    </DrawerDescription>
                    <DrawerClose asChild className="absolute top-3 right-3">
                        <Button variant="ghost" size="icon">
                            <X className="h-5 w-5" />
                            <span className="sr-only">Close</span>
                        </Button>
                    </DrawerClose>
                </DrawerHeader>

                <div className="p-5 overflow-y-auto space-y-6 flex-grow">
                    {/* Items Section */}
                    <section>
                        <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                            <ShoppingBag className="w-5 h-5 text-muted-foreground" /> Items ({order.items?.length || 0})
                        </h3>
                        <div className="space-y-4 max-h-60 overflow-y-auto pr-2">
                            {" "}
                            {/* Scrollable items */}
                            {order.items && order.items.length > 0 ? (
                                order.items.map((item, index) => (
                                    <React.Fragment key={item._id || index}>
                                        <div className="flex items-start gap-3">
                                            <img
                                                src={item.image?.[0] || "/placeholder-image.png"}
                                                alt={item.name || "Product image"}
                                                className="w-16 h-16 rounded-md object-cover border bg-muted flex-shrink-0"
                                                loading="lazy"
                                                onError={(e) => {
                                                    e.target.onerror = null;
                                                    e.target.src = "/placeholder-image.png";
                                                }}
                                            />
                                            <div className="flex-grow text-sm space-y-0.5">
                                                <p className="font-medium text-foreground line-clamp-2">
                                                    {item.name || "Unnamed Product"}
                                                </p>
                                                <p className="text-muted-foreground text-xs">
                                                    Qty: {item.quantity || 1}
                                                    {item.color && <span className="ml-2 pl-2 border-l">Color: {item.color}</span>}
                                                    {item.size && <span className="ml-2 pl-2 border-l">Size: {item.size}</span>}
                                                </p>
                                                <p className="text-foreground font-semibold pt-0.5">
                                                    {formatCurrency(item.price, currencySymbol)}
                                                </p>
                                            </div>
                                            {/* Link to product page if productId exists */}
                                            {item.productId && (
                                                <Button
                                                    variant="link"
                                                    size="sm"
                                                    asChild
                                                    className="ml-auto self-start h-auto p-0 text-primary hover:text-primary/80 text-xs"
                                                >
                                                    <Link to={`/product/${item.productId}`}>View</Link>
                                                </Button>
                                            )}
                                        </div>
                                        {index < order.items.length - 1 && <Separator className="my-3" />}
                                    </React.Fragment>
                                ))
                            ) : (
                                <p className="text-muted-foreground text-sm">
                                    No item details available.
                                </p>
                            )}
                        </div>
                    </section>

                    <Separator />

                    {/* Summary & Address Section */}
                    <section className="grid grid-cols-1 sm:grid-cols-2 gap-5">
                        {/* Summary */}
                        <div className="space-y-2">
                            <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
                                <CreditCard className="w-5 h-5 text-muted-foreground" /> Summary
                            </h3>
                            <div className="text-sm space-y-1 text-muted-foreground">
                                {/* Add subtotal, shipping, tax if available from API */}
                                <div className="flex justify-between">
                                    <span>Subtotal:</span>{" "}
                                    <span className="text-foreground">
                                        {formatCurrency(order.amount, currencySymbol)}
                                    </span>
                                </div>
                                <div className="flex justify-between">
                                    <span>Shipping:</span> <span className="text-foreground">Free</span>{" "}
                                    {/* Assuming free, adjust if needed */}
                                </div>
                                {/* Add Tax row if applicable */}
                                <Separator className="my-1.5" />
                                <div className="flex justify-between font-bold text-base text-foreground">
                                    <span>Total:</span>{" "}
                                    <span>{formatCurrency(order.amount, currencySymbol)}</span>
                                </div>
                                <p className="pt-1">
                                    Payment:{" "}
                                    <span className="font-medium text-foreground capitalize">
                                        {order.paymentMethod || "N/A"}
                                    </span>
                                    <span
                                        className={`font-medium ml-1.5 px-1.5 py-0.5 rounded text-xs ${
                                            order.payment
                                                ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                                                : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
                                        }`}
                                    >
                                        {order.payment ? "Paid" : "Pending"}
                                    </span>
                                </p>
                            </div>
                        </div>

                        {/* Shipping Address */}
                        <div className="space-y-1">
                            <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
                                <MapPin className="w-5 h-5 text-muted-foreground" /> Shipping To
                            </h3>
                            {order.address ? (
                                <div className="text-sm text-muted-foreground leading-relaxed">
                                    <p className="font-medium text-foreground">
                                        {order.address.firstName} {order.address.lastName}
                                    </p>
                                    <p>{order.address.street}</p>
                                    <p>
                                        {order.address.city}
                                        {order.address.city && order.address.state ? ", " : ""}
                                        {order.address.state} {order.address.zipcode}
                                    </p>
                                    <p>{order.address.country}</p>
                                    {order.address.phone && <p>Phone: {order.address.phone}</p>}
                                </div>
                            ) : (
                                <p className="text-sm text-muted-foreground">
                                    Address details not available.
                                </p>
                            )}
                        </div>
                    </section>

                    {/* Optional: Tracking Link */}
                    {order.trackingUrl && ( // Assuming API might provide a trackingUrl
                        <>
                            <Separator />
                            <Button asChild className="w-full">
                                <a href={order.trackingUrl} target="_blank" rel="noopener noreferrer">
                                    Track Package <ArrowRight className="ml-2 h-4 w-4" />
                                </a>
                            </Button>
                        </>
                    )}
                </div>

                {/* Optional Footer Actions */}
                {/* <DrawerFooter className="border-t p-4">
                     <Button variant="outline" onClick={onClose}>Close</Button>
                     Add other actions like "Reorder" or "Return Items" if applicable
                </DrawerFooter> */}
            </DrawerContent>
        </Drawer>
    );
};

const OrdersTimeline = () => {
    const { backendUrl, token } = useContext(ShopContext);
    // Example: Get currency from context or config, default to USD
    const currencySymbol = "$";

    const [orderData, setOrderData] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [isDrawerOpen, setIsDrawerOpen] = useState(false);

    // Wrap data loading in useCallback to prevent recreation on every render
    const loadOrderData = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        // Optionally clear data, or keep stale data while loading new
        // setOrderData([]);

        if (!token) {
            setError("Please log in to view your orders.");
            setIsLoading(false);
            return; // Stop execution if no token
        }

        try {
            const response = await axios.post(
                `${backendUrl}/api/order/userorder`,
                {}, // Empty body for POST as per original code
                { headers: { token } }
            );

            if (response.data.success && Array.isArray(response.data.orders)) {
                // Sort orders by date, newest first
                const sortedOrders = response.data.orders.sort(
                    (a, b) => new Date(b.date) - new Date(a.date)
                );
                setOrderData(sortedOrders);
            } else {
                // Handle non-success API responses
                setError(response.data.message || "Failed to load orders.");
                setOrderData([]); // Clear data on failure
            }
        } catch (err) {
            console.error("Error fetching orders:", err);
            let errorMessage = "An unexpected error occurred while fetching your orders.";
            if (axios.isAxiosError(err) && err.response) {
                // Try to get more specific error from backend response
                errorMessage = err.response.data?.message || err.message;
            } else if (err instanceof Error) {
                errorMessage = err.message;
            }
            setError(errorMessage);
            setOrderData([]); // Clear data on error
        } finally {
            setIsLoading(false);
        }
    }, [backendUrl, token]); // Dependencies for useCallback

    useEffect(() => {
        loadOrderData();
    }, [loadOrderData]); // Run loadOrderData when the component mounts or dependencies change

    const handleSelectOrder = useCallback((order) => {
        setSelectedOrder(order);
        setIsDrawerOpen(true);
    }, []); // No dependencies, function doesn't change

    const handleCloseDrawer = useCallback(() => {
        setIsDrawerOpen(false);
        // Delay clearing selected order for smoother closing animation
        const timer = setTimeout(() => setSelectedOrder(null), 300); // Match typical animation duration
        return () => clearTimeout(timer); // Cleanup timeout if component unmounts
    }, []);

    // --- Rendering Logic ---
    const renderContent = () => {
        // 1. Loading State
        if (isLoading) {
            return (
                <Timeline>
                    {[...Array(3)].map((_, i) => ( // Render 3 skeleton items
                        <TimelineItem key={`skeleton-${i}`} isLast={i === 2}>
                            <TimelineDot status="loading" />
                            <TimelineContent>
                                <Skeleton className="h-24 w-full rounded-lg" />
                            </TimelineContent>
                        </TimelineItem>
                    ))}
                </Timeline>
            );
        }

        // 2. Error State
        if (error) {
            return (
                <Alert variant="destructive" className="max-w-xl mx-auto">
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>Error Loading Orders</AlertTitle>
                    <AlertDescription>
                        {error}
                        <div className="mt-4 flex gap-2">
                           <Button onClick={loadOrderData} size="sm">Retry</Button>
                           <Button variant="outline" size="sm" asChild>
                               <Link to="/">Go Home</Link>
                           </Button>
                        </div>
                    </AlertDescription>
                </Alert>
            );
        }

        // 3. No Orders State
        if (orderData.length === 0) {
            return (
                <div className="text-center py-20 px-6 flex flex-col items-center gap-5 border border-dashed rounded-lg max-w-md mx-auto bg-card">
                    <CalendarDays className="w-20 h-20 text-gray-300 dark:text-gray-600" />
                    <h2 className="text-2xl font-semibold text-foreground">
                        Your Order Timeline is Empty
                    </h2>
                    <p className="text-muted-foreground">
                        Looks like you haven't placed any orders yet.
                    </p>
                    <Button asChild size="lg" className="mt-4">
                        <Link to="/">
                            <ShoppingBag className="mr-2 h-5 w-5" /> Start Shopping
                        </Link>
                    </Button>
                </div>
            );
        }

        // 4. Display Orders Timeline
        return (
            <Timeline>
                {orderData.map((order, index) => (
                    <TimelineItem
                        key={order._id}
                        isLast={index === orderData.length - 1}
                    >
                        <TimelineDot
                            status={order.status}
                            icon={getStatusIcon(order.status)}
                        />
                        <TimelineContent>
                            <OrderSummaryCard
                                order={order}
                                onSelectOrder={handleSelectOrder}
                                currencySymbol={currencySymbol}
                            />
                        </TimelineContent>
                    </TimelineItem>
                ))}
            </Timeline>
        );
    };

    // --- Component Return ---
    return (
        <div className="min-h-screen flex flex-col bg-gradient-to-b from-background to-muted/30">
            <main className="flex-grow container mx-auto max-w-7xl py-12 md:py-16 px-4 sm:px-6 lg:px-8"> {/* Using container for standard padding/max-width */}
                <h1 className="text-3xl lg:text-4xl font-extrabold mb-10 lg:mb-12 text-center text-foreground tracking-tight">
                    My Order Journey
                </h1>

                {/* Max width container specifically for the timeline content */}
                <div className="max-w-3xl mx-auto">
                    {renderContent()}
                </div>
            </main>

            {/* Drawer for Order Details - Rendered outside main content flow */}
            <OrderDetailsDrawer
                order={selectedOrder}
                isOpen={isDrawerOpen}
                onClose={handleCloseDrawer}
                currencySymbol={currencySymbol}
            />

            <Footer />
        </div>
    );
};

export default OrdersTimeline;
</file>

<file path="pages/OrdersPage.jsx">
import React, { useContext, useEffect, useState } from "react";
import { ShopContext } from "../context/ShopContext";
import axios from "axios";
import Title from "../components/Title";
import Footer from "../components/Footer";
import OrderDetail from "../components/OrderDetail"; // Component hiển thị chi tiết đơn hàng
import { toast } from "react-toastify";

const OrdersPage = () => {
  const { backendUrl, token, currency } = useContext(ShopContext);
  const [orders, setOrders] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null);

  // Gọi API lấy danh sách đơn hàng của người dùng
  const fetchOrders = async () => {
    try {
      if (!token) return;
      const response = await axios.post(
        `${backendUrl}/api/order/userorders`,
        {},
        { headers: { token } }
      );
      if (response.data.success) {
        // Giả sử API trả về mảng đơn hàng, mỗi đơn hàng có trường items (mảng sản phẩm)
        setOrders(response.data.orders.reverse());
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(error.message);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, [token]);

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="max-padd-container py-10">
        <Title title1="My" title2="Orders" titleStyles="text-2xl font-bold text-center mb-6" />
        <div className="flex flex-col md:flex-row gap-6">
          {/* Danh sách đơn hàng */}
          <div className="flex-1">
            {orders.length > 0 ? (
              orders.map((order) => (
                <div
                  key={order._id}
                  className="bg-white p-4 rounded-lg shadow mb-4 cursor-pointer hover:shadow-lg transition"
                  onClick={() => setSelectedOrder(order)}
                >
                  <div className="flex items-center gap-4">
                    {/* Hiển thị hình ảnh sản phẩm đầu tiên trong đơn hàng */}
                    <img
                      src={order.items[0]?.image[0]}
                      alt="order"
                      className="w-16 h-16 object-cover rounded"
                    />
                    <div className="flex-1">
                      <p className="font-bold">Order ID: {order._id}</p>
                      <p>Date: {new Date(order.date).toLocaleString()}</p>
                      <p>Status: {order.status}</p>
                      <p>
                        Amount: {currency}
                        {order.amount}
                      </p>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <p className="text-center">No orders found.</p>
            )}
          </div>
          {/* Chi tiết đơn hàng */}
          {selectedOrder && (
            <div className="flex-1">
              <OrderDetail order={selectedOrder} />
              <button
                onClick={() => setSelectedOrder(null)}
                className="btn-secondary mt-4"
              >
                Close Detail
              </button>
            </div>
          )}
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default OrdersPage;
</file>

<file path="pages/OrderSuccess.jsx">
import React from "react";
import { Link } from "react-router-dom";
import Footer from "../components/Footer";
// import Title from "../components/Title"; // Bỏ Title component

// Import Shadcn UI components
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { CheckCircle } from "lucide-react"; // Import icon

const OrderSuccess = () => {
  return (
    // Cấu trúc layout chuẩn để Footer ở cuối trang
    <div className="min-h-screen flex flex-col">
      {/* Phần nội dung chính, co giãn và căn giữa */}
      <main className="flex-grow flex items-center justify-center max-padd-container py-16">
        {/* Sử dụng Card */}
        <Card className="w-full max-w-md text-center shadow-lg"> {/* Thêm shadow */}
          <CardHeader className="items-center"> {/* Căn giữa nội dung header */}
            {/* Icon thành công */}
            <CheckCircle className="h-16 w-16 text-green-500 mb-4" />
            {/* Tiêu đề */}
            <CardTitle className="text-2xl font-bold">Order Confirmed!</CardTitle>
            {/* Mô tả */}
            <CardDescription className="text-base">
              Thank you for your purchase.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4"> {/* Thêm khoảng cách */}
            <p className="text-muted-foreground">
              Your order has been placed successfully and is being processed.
            </p>
            <p className="text-muted-foreground">
              You can track your order status in the "My Orders" section.
            </p>
            {/* Nút về trang chủ */}
            <Button asChild className="w-full sm:w-auto group mt-4 bg-black text-white hover:bg-gray-800 dark:bg-white dark:text-black dark:hover:bg-gray-200">
              <Link to="/">Back to Homepage</Link>
            </Button>
             {/* Optional: Link to My Orders page */}
             <Button variant="outline" asChild className="w-full sm:w-auto mt-2">
                <Link to="/orders">View My Orders</Link>
             </Button>
          </CardContent>
        </Card>
      </main>
      <Footer />
    </div>
  );
};

export default OrderSuccess;
</file>

<file path="pages/PlaceOrder.jsx">
import React, { useContext, useState } from "react";
// import Title from "../components/Title"; // Bỏ Title
import CartTotal from "../components/CartTotal";
import Footer from "../components/Footer";
import { ShopContext } from "../context/ShopContext";
import axios from "axios";
import { toast } from "react-toastify";

// Import Shadcn UI components
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Separator } from "@/components/ui/separator";
import { Send } from "lucide-react"; // Icon cho nút Place Order

const PlaceOrder = () => {
  const [method, setMethod] = useState("cod"); // "cod" or "vnpay"
  const {
    navigate,
    products,
    // currency, // Không cần trực tiếp vì CartTotal đã dùng
    delivery_charges,
    cartItems,
    setCartItems,
    getCartAmount,
    token,
    backendUrl,
  } = useContext(ShopContext);

  const [formData, setFormData] = useState({
    firstName: "", lastName: "", email: "", street: "",
    city: "", state: "", zipcode: "", country: "", phone: "",
  });

  // --- Giữ nguyên các hàm onChangeHandler và onSubmitHandler ---
    const onChangeHandler = (event) => {
        const { name, value } = event.target;
        setFormData((data) => ({ ...data, [name]: value }));
    };

    const onSubmitHandler = async (e) => {
        e.preventDefault();
        // Simple validation (kept for brevity, consider using react-hook-form + zod)
        for (const key in formData) {
            if (!formData[key]) {
                toast.error(`Please fill in the ${key.replace(/([A-Z])/g, ' $1').toLowerCase()} field.`);
                return;
            }
        }

        try {
            let orderItems = [];
            // Build order items
            for (const productId in cartItems) {
                for (const color in cartItems[productId]) {
                    if (cartItems[productId][color] > 0) {
                        const productData = products.find((product) => product._id === productId);
                        if (!productData || !productData.storeId) {
                            toast.error(`Product ${productData?.name || productId} is missing store information.`);
                            return;
                        }
                        // Avoid mutating productData from context if possible
                        const item = {
                           _id: productData._id,
                           name: productData.name,
                           price: productData.price,
                           image: productData.image, // Chỉ cần ảnh đầu tiên?
                           storeId: productData.storeId,
                           category: productData.category, // Thêm category nếu cần
                           color: color,
                           quantity: cartItems[productId][color],
                        };
                        orderItems.push(item);
                    }
                }
            }

            if (orderItems.length === 0) {
                toast.error("Your cart is empty.");
                navigate('/cart'); // Redirect back to cart
                return;
            }

            // Validate store IDs (kept)
            const storeIds = orderItems.map((item) => item.storeId);
            const uniqueStoreIds = Array.from(new Set(storeIds));
            if (uniqueStoreIds.length > 1) {
                toast.error("All products must be from the same store. Please place separate orders.");
                return;
            }
            if (!uniqueStoreIds[0]) {
                toast.error("Store information is missing for products.");
                return;
            }

            const orderData = {
                address: formData,
                items: orderItems,
                amount: getCartAmount() + delivery_charges,
                storeId: uniqueStoreIds[0],
            };

            // --- Payment Processing ---
            if (method === "cod") {
                const response = await axios.post(`${backendUrl}/api/order/place`, orderData, { headers: { token } });
                if (response.data.success) {
                    setCartItems({}); // Clear cart on success
                    navigate("/order-success");
                } else {
                    toast.error(response.data.message || "Failed to place order.");
                }
            } else if (method === "vnpay") {
                const response = await axios.post(`${backendUrl}/api/order/vnpay`, orderData, { headers: { token } });
                if (response.data.success && response.data.vnpUrl) {
                    setCartItems({}); // Clear cart before redirecting
                    window.location.replace(response.data.vnpUrl); // Redirect to VNPay
                } else {
                    toast.error(response.data.message || "Failed to initiate VNPay payment.");
                }
            } else {
                toast.error("Invalid payment method selected.");
            }

        } catch (error) {
            console.error("Order submission error:", error);
            toast.error(error.response?.data?.message || error.message || "An error occurred while placing the order.");
        }
    };
  // --- Kết thúc các hàm xử lý ---


  return (
    // Bỏ div bg-primary, dùng layout chuẩn
    <div className="min-h-screen">
      <form onSubmit={onSubmitHandler} className="max-padd-container py-12 md:py-16">
         {/* Page Title */}
         <h1 className="text-3xl font-bold mb-8 text-center">Checkout</h1>

         {/* Main Layout Grid */}
         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-12 items-start">

            {/* --- Left Column: Delivery Information --- */}
            <div className="lg:col-span-2">
              <Card>
                <CardHeader>
                  <CardTitle>Delivery Information</CardTitle>
                  <CardDescription>Please enter your shipping details.</CardDescription>
                </CardHeader>
                <CardContent>
                  {/* Form Grid */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* First Name */}
                    <div className="space-y-1.5">
                      <Label htmlFor="firstName">First Name</Label>
                      <Input id="firstName" name="firstName" placeholder="John" value={formData.firstName} onChange={onChangeHandler} required />
                    </div>
                    {/* Last Name */}
                    <div className="space-y-1.5">
                      <Label htmlFor="lastName">Last Name</Label>
                      <Input id="lastName" name="lastName" placeholder="Doe" value={formData.lastName} onChange={onChangeHandler} required />
                    </div>
                    {/* Email */}
                    <div className="md:col-span-2 space-y-1.5">
                       <Label htmlFor="email">Email Address</Label>
                       <Input id="email" name="email" type="email" placeholder="johndoe@example.com" value={formData.email} onChange={onChangeHandler} required />
                    </div>
                     {/* Street Address */}
                    <div className="md:col-span-2 space-y-1.5">
                      <Label htmlFor="street">Street Address</Label>
                      <Input id="street" name="street" placeholder="123 Main St" value={formData.street} onChange={onChangeHandler} required />
                    </div>
                    {/* City */}
                    <div className="space-y-1.5">
                      <Label htmlFor="city">City</Label>
                      <Input id="city" name="city" placeholder="Anytown" value={formData.city} onChange={onChangeHandler} required />
                    </div>
                     {/* State/Province */}
                    <div className="space-y-1.5">
                       <Label htmlFor="state">State / Province</Label>
                       <Input id="state" name="state" placeholder="State" value={formData.state} onChange={onChangeHandler} required />
                    </div>
                    {/* Zip Code */}
                    <div className="space-y-1.5">
                       <Label htmlFor="zipcode">Zip / Postal Code</Label>
                       <Input id="zipcode" name="zipcode" placeholder="10001" value={formData.zipcode} onChange={onChangeHandler} required />
                    </div>
                    {/* Country */}
                    <div className="space-y-1.5">
                       <Label htmlFor="country">Country</Label>
                       <Input id="country" name="country" placeholder="Country" value={formData.country} onChange={onChangeHandler} required />
                    </div>
                    {/* Phone Number */}
                    <div className="md:col-span-2 space-y-1.5">
                       <Label htmlFor="phone">Phone Number</Label>
                       <Input id="phone" name="phone" type="tel" placeholder="+1 234 567 890" value={formData.phone} onChange={onChangeHandler} required />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* --- Right Column: Order Summary & Payment --- */}
            <div className="lg:col-span-1 flex flex-col gap-6">
               {/* Cart Total Summary */}
               <CartTotal />

               {/* Payment Method Card */}
               <Card>
                  <CardHeader>
                     <CardTitle>Payment Method</CardTitle>
                     <CardDescription>Select how you want to pay.</CardDescription>
                  </CardHeader>
                  <CardContent>
                     {/* Sử dụng RadioGroup */}
                     <RadioGroup value={method} onValueChange={setMethod} className="space-y-3">
                        {/* VNPay Option */}
                        <div className="flex items-center space-x-2 p-3 border rounded-md has-[:checked]:border-primary has-[:checked]:ring-1 has-[:checked]:ring-primary">
                           <RadioGroupItem value="vnpay" id="vnpay" />
                           <Label htmlFor="vnpay" className="flex-1 cursor-pointer">
                              <span className="font-medium">VNPay Gateway</span>
                              <p className="text-xs text-muted-foreground">Pay securely via VNPay.</p>
                           </Label>
                           {/* Optional: Add VNPay logo */}
                           {/* <img src="/vnpay-logo.png" alt="VNPay" className="h-6"/> */}
                        </div>
                        {/* COD Option */}
                        <div className="flex items-center space-x-2 p-3 border rounded-md has-[:checked]:border-primary has-[:checked]:ring-1 has-[:checked]:ring-primary">
                           <RadioGroupItem value="cod" id="cod" />
                           <Label htmlFor="cod" className="flex-1 cursor-pointer">
                              <span className="font-medium">Cash on Delivery</span>
                              <p className="text-xs text-muted-foreground">Pay when you receive the order.</p>
                           </Label>
                        </div>
                     </RadioGroup>
                  </CardContent>
               </Card>

               {/* Place Order Button */}
               {/* Đặt Button submit ở đây, bên ngoài các Card nhưng vẫn trong form */}
               <Button type="submit" size="lg" className="w-full group bg-black text-white hover:bg-gray-800 dark:bg-white dark:text-black dark:hover:bg-gray-200" disabled={getCartAmount() === 0}> {/* Disable nếu giỏ hàng trống */}
                  Place Order
                  <Send className="ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" />
               </Button>
            </div>

         </div>
      </form>
      <Footer />
    </div>
  );
};

export default PlaceOrder;
</file>

<file path="pages/Product.jsx">
import React, { useContext, useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import axios from "axios";
import { ShopContext } from "../context/ShopContext";
import {
  FaCheck,
  FaHeart,
  FaStar,
  FaStarHalfStroke,
  FaTruckFast,
} from "react-icons/fa6";
import { TbShoppingBagPlus, TbMapPin } from "react-icons/tb";
import ProductDescription from "../components/ProductDescription";
import ProductFeatures from "../components/ProductFeatures";
import RelatedProducts from "../components/RelatedProducts";
import Footer from "../components/Footer";
import ReviewList from "../components/ReviewList";

const Product = () => {
  const { productId } = useParams();
  const { products, currency, addToCart } = useContext(ShopContext);
  const [product, setProduct] = useState(null);
  const [mainImage, setMainImage] = useState("");
  const [selectedColor, setSelectedColor] = useState("");
  const [storeInfo, setStoreInfo] = useState(null);
  const { backendUrl, token } = useContext(ShopContext);

  const fetchProductData = () => {
    const selectedProduct = products.find((item) => item._id === productId);
    if (selectedProduct) {
      // --- COLOR FIX (within fetchProductData) ---
      const cleanedColors = selectedProduct.colors
        ? selectedProduct.colors.map((color) => color.replace(/['"]+/g, ""))
        : []; // Handle potential undefined/null

      setProduct({ ...selectedProduct, colors: cleanedColors }); // Update with cleaned colors
      setMainImage(selectedProduct.image[0]);
      // Pre-select the first *cleaned* color if available
      if (cleanedColors.length > 0) {
        setSelectedColor(cleanedColors[0]);
      }
    }
  };

  useEffect(() => {
    fetchProductData();
  }, [productId, products]);

  useEffect(() => {
    if (product && product.storeId) {
      axios
        .get(`${backendUrl}/api/store/single?storeId=${product.storeId}`)
        .then((response) => {
          if (response.data.success) {
            setStoreInfo(response.data.store);
          }
        })
        .catch((error) => console.error(error));
    }
  }, [product, backendUrl]);

  if (!product) {
    return (
      <div className="flex items-center justify-center h-screen">
        <p className="text-gray-500 animate-pulse">Loading...</p>
      </div>
    );
  }

  return (
    <div>
      <div className="max-w-7xl mx-auto py-10 px-4 sm:px-6 lg:px-8">
        {/* --- PRODUCT DATA --- */}
        <div className="flex flex-col lg:flex-row gap-10 rounded-2xl p-3 mb-6 bg-white shadow-md">
          {/* --- IMAGE SECTION --- */}
          <div className="flex flex-col gap-4 lg:w-1/2">
            {/* Main Image with Hover Zoom */}
            <div className="relative w-full aspect-video border rounded-lg overflow-hidden group"> {/* Changed aspect-w-1 aspect-h-1 to aspect-video */}
              <img
                src={mainImage}
                alt={`Product: ${product.name}`}
                className="w-full h-full object-fit object-center transition duration-300 ease-in-out transform group-hover:scale-110"
              />
            </div>

            {/* Thumbnail Images */}
            <div className="flex gap-2 flex-wrap">
              {product.image.map((img, i) => (
                <button
                  key={i}
                  className={`w-16 h-16 border rounded overflow-hidden transition duration-200 ease-in-out ${
                    img === mainImage
                      ? "border-blue-500 ring-2 ring-blue-500 ring-opacity-75"
                      : "border-gray-300 hover:border-gray-400"
                  }`}
                  onClick={() => setMainImage(img)}
                  aria-label={`View image ${i + 1}`}
                >
                  <img
                    src={img}
                    alt={`Thumbnail ${i + 1} of ${product.name}`}
                    className="w-full h-full object-cover object-center"
                  />
                </button>
              ))}
            </div>
          </div>

          {/* --- PRODUCT INFO SECTION --- */}
          <div className="flex-1 px-4 py-6 sm:px-6 lg:px-8 bg-white rounded-lg">
            <h1 className="text-2xl sm:text-3xl font-bold tracking-tight text-gray-900">
              {product.name}
            </h1>

            {/* --- RATING --- */}
            <div className="flex items-center gap-x-2 mt-2">
              <div className="flex items-center gap-x-1 text-yellow-400">
                <FaStar />
                <FaStar />
                <FaStar />
                <FaStar />
                <FaStarHalfStroke />
              </div>
              <span className="text-sm text-gray-500">(123 reviews)</span>
            </div>

            {/* --- PRICE --- */}
            <h2 className="text-xl sm:text-2xl font-semibold text-gray-900 mt-3">
              {currency}
              {product.price.toFixed(2)}
            </h2>

            {/* --- DESCRIPTION --- */}
            <p className="text-base text-gray-700 mt-4 leading-relaxed">
              {product.description}
            </p>

            {/* --- COLOR OPTIONS --- */}
            {product.colors && product.colors.length > 0 && (
              <div className="mt-6">
                <h3 className="text-sm font-medium text-gray-900">
                  Choose a color:
                </h3>
                <div className="flex gap-2 mt-2">
                  {product.colors.map((col, i) => (
                    <button
                      key={i}
                      onClick={() => setSelectedColor(col)}
                      style={{ backgroundColor: col }}
                      className={`w-8 h-8 rounded-full flex items-center justify-center border transition duration-200 ease-in-out ${
                        selectedColor === col
                          ? "border-blue-500 ring-2 ring-blue-500 ring-opacity-75"
                          : "border-gray-300 hover:border-gray-400"
                      }`}
                      title={col}
                      aria-label={`Select color: ${col}`}
                    >
                      {selectedColor === col && (
                        <FaCheck
                          className={
                            col.toLowerCase() === "white"
                              ? "text-black"
                              : "text-white"
                          }
                        />
                      )}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* --- ACTION BUTTONS --- */}
            <div className="mt-8 flex flex-col sm:flex-row items-center gap-4">
              <button
                onClick={() => addToCart(product._id, selectedColor)}
                className="w-full sm:w-auto px-6 py-3 rounded-lg bg-black text-white font-semibold text-base transition duration-300 ease-in-out flex items-center justify-center gap-x-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
              >
                <TbShoppingBagPlus className="text-lg" />
                Add to Cart
              </button>
              <button
                className="w-full sm:w-auto px-5 py-3 rounded-lg border border-gray-300 hover:bg-gray-100 text-gray-700 font-medium transition duration-300 ease-in-out flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50"
              >
                <FaHeart className="text-lg" />
                <span className="sr-only">Add to Wishlist</span>
              </button>
            </div>

            {/* --- DELIVERY INFO --- */}
            <div className="mt-6 border-t border-gray-200 pt-4">
              <div className="flex items-center gap-x-2">
                <FaTruckFast className="text-xl text-gray-500" />
                <span className="text-sm text-gray-600">
                  Free Delivery on orders over {currency}500.00
                </span>
              </div>
            </div>

            {/* --- ADDITIONAL INFO --- */}
            <div className="mt-4 text-sm text-gray-500 space-y-2">
              <p>✓ Authenticity Guaranteed</p>
              <p>✓ Cash on Delivery Available</p>
              <p>✓ Easy 7-Day Returns</p>
            </div>
          </div>
        </div>

        {/* --- SELLER INFORMATION --- */}
        {storeInfo && (
          <section className="mt-12 p-6 bg-white rounded-lg shadow-md">
            <h2 className="text-xl font-bold mb-4">Seller Information</h2>
            <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
              <img
                src={storeInfo.storeLogo}
                alt={`Logo of ${storeInfo.storeName}`}
                className="w-16 h-16 rounded-full object-cover object-center ring-2 ring-gray-300"
              />
              <div>
                <h3 className="text-lg font-semibold">{storeInfo.storeName}</h3>
                <div className="flex items-center gap-1 mt-1">
                  <TbMapPin className="text-gray-500" />
                  <span className="text-gray-600">{storeInfo.storeAddress}</span>
                </div>
                <Link
                  to={`/store/${storeInfo._id}`}
                  className="mt-3 inline-block px-4 py-2 bg-black text-white rounded-md text-sm font-medium transition duration-300 ease-in-out"
                >
                  Visit Store
                </Link>
              </div>
            </div>
          </section>
        )}

        <ReviewList
          productId={productId}
          backendUrl={backendUrl}
          token={token}
        />
        <RelatedProducts category={product.category} />
      </div>
      <Footer />
    </div>
  );
};

export default Product;
</file>

<file path="pages/RequestStore.jsx">
import React, { useContext, useEffect, useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import { ShopContext } from "../context/ShopContext";

const RequestStore = () => {
  const [storeName, setStoreName] = useState("");
  const [storeAddress, setStoreAddress] = useState("");
  const { backendUrl, token, currency } = useContext(ShopContext);

  const onSubmitHandler = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(
        `${backendUrl}/api/store/request`,
        {
        
          storeName,
          storeAddress,
        },
        { headers: { token } }
      );

      if (response.data.success) {
        toast.success(response.data.message);
        setStoreName("");
        setStoreAddress("");
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.log(error);
      toast.error(
        error.response?.data?.message || "Something went wrong. Please try again."
      );
    }
  };

  return (
    <div className="px-2 sm:px-8 mt-14 pb-16">
      <form
        onSubmit={onSubmitHandler}
        className="flex flex-col gap-y-4 lg:w-[500px] mx-auto bg-white p-6 rounded shadow"
      >
        <h3 className="bold-36 text-center mb-4">Request Store Registration</h3>
        <div>
          <label htmlFor="storeName" className="medium-15">
            Store Name
          </label>
          <input
            id="storeName"
            type="text"
            placeholder="Enter store name"
            value={storeName}
            onChange={(e) => setStoreName(e.target.value)}
            className="w-full px-3 py-2 ring-1 ring-slate-900/10 rounded bg-white mt-1"
          />
        </div>
        <div>
          <label htmlFor="storeAddress" className="medium-15">
            Store Address
          </label>
          <input
            id="storeAddress"
            type="text"
            placeholder="Enter store address"
            value={storeAddress}
            onChange={(e) => setStoreAddress(e.target.value)}
            className="w-full px-3 py-2 ring-1 ring-slate-900/10 rounded bg-white mt-1"
          />
        </div>
        <button type="submit" className="btn-dark mt-4">
          Submit Request
        </button>
      </form>
    </div>
  );
};

export default RequestStore;
</file>

<file path="pages/StoreManagement.jsx">
import React, { useEffect, useState, useContext } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import { ShopContext } from "../context/ShopContext";
import Footer from "../components/Footer";
import banner from "../assets/banner.jpg";
import StoreInfoSection from "../components/StoreInfoSection";
import ProductsSection from "../components/ProductsSection";
import AvatarModal from "../components/AvatarModal";
import EditProductModal from "../components/EditProductModal";
import CreateProductModal from "../components/CreateProductModal";
import StoreOrders from "../components/StoreOrders";
// import Item from "../components/Item"; // Không cần import Item ở đây nữa

// Import Shadcn Tabs components
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Camera } from "lucide-react"; // Icon cho nút đổi avatar

const StoreManagement = () => {
  // Bỏ state activeTab vì Tabs sẽ quản lý
  // const [activeTab, setActiveTab] = useState("info");

  const [storeInfo, setStoreInfo] = useState(null);
  const [storeName, setStoreName] = useState("");
  const [storeAddress, setStoreAddress] = useState("");
  const [products, setProducts] = useState([]);

  const [showAvatarModal, setShowAvatarModal] = useState(false);
  const [avatarFile, setAvatarFile] = useState(null);
  const [avatarPreview, setAvatarPreview] = useState("");

  const [showEditProductModal, setShowEditProductModal] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [editProductData, setEditProductData] = useState({ /* ... giữ nguyên ... */ });

  const [showCreateProductModal, setShowCreateProductModal] = useState(false);
  const [createProductData, setCreateProductData] = useState({ /* ... giữ nguyên ... */ });

  const { backendUrl, token, currency } = useContext(ShopContext);

  // --- Các hàm xử lý API (getStoreInfo, updateStoreInfo, handleSaveAvatar, ...) giữ nguyên ---
  // ... (Giữ nguyên các hàm xử lý API đã có) ...
  // Lấy thông tin cửa hàng
  const getStoreInfo = async () => {
    try {
      const response = await axios.get(`${backendUrl}/api/store-management/my-store`, {
        headers: { token },
      });
      if (response.data.success) {
        setStoreInfo(response.data.store);
        setStoreName(response.data.store.storeName);
        setStoreAddress(response.data.store.storeAddress);
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "Error fetching store information"
      );
    }
  };

  // Cập nhật thông tin cửa hàng
  const updateStoreInfo = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.put(
        `${backendUrl}/api/store-management/update-info`,
        { storeName, storeAddress },
        { headers: { token } }
      );
      if (response.data.success) {
        toast.success(response.data.message);
        setStoreInfo(response.data.store);
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "Error updating store information"
      );
    }
  };

  // Cập nhật avatar cửa hàng qua modal
  const handleSaveAvatar = async () => {
    if (!avatarFile) {
      toast.error("Please select an avatar file.");
      return;
    }
    const formData = new FormData();
    formData.append("avatar", avatarFile);
    try {
      const response = await axios.put(
        `${backendUrl}/api/store-management/update-avatar`,
        formData,
        {
          headers: {
            token,
            "Content-Type": "multipart/form-data",
          },
        }
      );
      if (response.data.success) {
        toast.success(response.data.message);
        setStoreInfo({ ...storeInfo, storeLogo: response.data.storeLogo });
        setShowAvatarModal(false);
        // Reset preview and file
        setAvatarFile(null);
        setAvatarPreview("");
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "Error updating store avatar"
      );
    }
  };

  // Khi người dùng chọn file mới cho avatar, cập nhật preview
  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setAvatarFile(file);
      setAvatarPreview(URL.createObjectURL(file));
    }
  };

  // Lấy danh sách sản phẩm của cửa hàng
  const getStoreProducts = async () => {
    try {
      const response = await axios.get(`${backendUrl}/api/store-management/products`, {
        headers: { token },
      });
      if (response.data.success) {
        setProducts(response.data.products);
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "Error fetching store products"
      );
    }
  };

  // Xoá sản phẩm
  const deleteProduct = async (productId) => {
    // Thêm xác nhận trước khi xóa
    if (!window.confirm("Are you sure you want to delete this product?")) {
        return;
    }
    try {
      const response = await axios.delete(`${backendUrl}/api/store-management/products/${productId}`, {
        headers: { token },
      });
      if (response.data.success) {
        toast.success(response.data.message);
        getStoreProducts(); // Refresh product list
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "Error deleting product"
      );
    }
  };


 // Mở modal chỉnh sửa sản phẩm và set dữ liệu ban đầu
  const handleEditProduct = (product) => {
    setEditingProduct(product);
    setEditProductData({
      name: product.name || "",
      price: product.price || "",
      description: product.description || "",
      category: product.category || "",
      popular: product.popular || false,
      colors: product.colors ? product.colors.join(", ") : "", // Join colors array into string
    });
    setShowEditProductModal(true);
  };

  // Lưu thay đổi sản phẩm sau khi chỉnh sửa
  const handleSaveProduct = async () => {
    if (!editingProduct) return;
    try {
        // Convert price to number
        const priceAsNumber = parseFloat(editProductData.price);
        if (isNaN(priceAsNumber)) {
            toast.error("Price must be a valid number.");
            return;
        }

        const response = await axios.put(
        `${backendUrl}/api/store-management/products/${editingProduct._id}`,
        {
          ...editProductData,
          price: priceAsNumber, // Send price as number
          // Split colors string back into array, trimming whitespace
          colors: editProductData.colors.split(',').map(c => c.trim()).filter(c => c),
        },
        { headers: { token } }
      );
      if (response.data.success) {
        toast.success(response.data.message);
        setShowEditProductModal(false);
        setEditingProduct(null);
        getStoreProducts(); // Refresh product list
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "Error updating product"
      );
    }
  };

  // Mở modal tạo sản phẩm mới
  const handleOpenCreateProduct = () => {
    // Reset create form data
    setCreateProductData({
      name: "",
      price: "",
      description: "",
      category: "",
      popular: false,
      colors: "",
      // Reset image file state if managed here or in modal
    });
    setShowCreateProductModal(true);
  };

  // Lưu sản phẩm mới
  const handleSaveNewProduct = async (formData) => { // Nhận FormData từ Modal
    try {
      const response = await axios.post(
        `${backendUrl}/api/store-management/products`,
        formData, // Gửi FormData trực tiếp
        {
          headers: {
             token,
            // Content-Type sẽ được set tự động bởi axios khi gửi FormData
           },
        }
      );
      if (response.data.success) {
        toast.success(response.data.message);
        setShowCreateProductModal(false);
        getStoreProducts(); // Refresh product list
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "Error creating product"
      );
    }
  };


  useEffect(() => {
    if (token) {
      getStoreInfo();
      getStoreProducts();
    }
  }, [token]);

  return (
    // Bỏ text-tertiary nếu không cần set màu mặc định ở đây
    <div className="min-h-screen">
      {/* Banner and Avatar */}
      <div className="relative w-full h-48 md:h-64 overflow-hidden mb-8 group"> {/* Thêm group */}
        <img
          src={banner} // Sử dụng banner mặc định hoặc storeInfo.storeBanner nếu có
          alt="Store Banner"
          className="object-cover w-full h-full"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-black/20 to-transparent" /> {/* Gradient nhẹ */}

        {/* Avatar và Thông tin Store */}
        {storeInfo && (
          <div className="absolute bottom-4 left-4 md:left-6 flex items-end gap-4">
            <div className="relative">
              <img
                src={avatarPreview || storeInfo.storeLogo || "/default_store_logo.png"} // Ưu tiên preview nếu có
                alt="Store Avatar"
                className="w-20 h-20 md:w-24 md:h-24 rounded-full object-cover ring-4 ring-white dark:ring-gray-800 shadow-md"
              />
              {/* Nút đổi Avatar chỉ hiện khi hover */}
               <button
                 onClick={() => {
                    setAvatarPreview(storeInfo.storeLogo || "/default_store_logo.png"); // Reset preview khi mở modal
                    setAvatarFile(null); // Reset file đã chọn
                    setShowAvatarModal(true);
                 }}
                 className="absolute bottom-0 right-0 bg-black/60 text-white p-1.5 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                 aria-label="Change store avatar"
               >
                 <Camera className="w-4 h-4" />
               </button>
            </div>
            <div className="text-white pb-1">
              <h2 className="text-xl md:text-2xl font-bold mb-0.5 line-clamp-1">{storeName || "My Store"}</h2>
              <p className="text-sm md:text-base text-gray-200 line-clamp-1">{storeAddress || "No address"}</p>
            </div>
          </div>
        )}
      </div>
      <div className="max-padd-container">
        <Tabs defaultValue="info" className="w-full">
          <TabsList className="grid w-full grid-cols-3 max-w-md mx-auto mb-6 md:mb-8">
            <TabsTrigger value="info">Store Info</TabsTrigger>
            <TabsTrigger value="products">Products</TabsTrigger>
            <TabsTrigger value="orders">Orders</TabsTrigger>
          </TabsList>

          {/* Tab Content */}
          <TabsContent value="info">
            {/* Section Info sẽ dùng Shadcn Card bên trong nó */}
            <StoreInfoSection
              storeName={storeName}
              setStoreName={setStoreName}
              storeAddress={storeAddress}
              setStoreAddress={setStoreAddress}
              updateStoreInfo={updateStoreInfo}
            />
          </TabsContent>
          <TabsContent value="products">
            <ProductsSection
              products={products}
              currency={currency}
              onEdit={handleEditProduct}
              onDelete={deleteProduct}
              onCreate={handleOpenCreateProduct}
            />
          </TabsContent>
          <TabsContent value="orders">
            <StoreOrders backendUrl={backendUrl} token={token} />
          </TabsContent>
        </Tabs>
      </div>
      {showAvatarModal && (
        <AvatarModal
          avatarPreview={avatarPreview}
          handleAvatarChange={handleAvatarChange}
          handleSaveAvatar={handleSaveAvatar}
          onCancel={() => setShowAvatarModal(false)}
        />
      )}
      {showEditProductModal && editingProduct && (
        <EditProductModal
          editProductData={editProductData}
          setEditProductData={setEditProductData}
          handleSaveProduct={handleSaveProduct}
          onCancel={() => { setShowEditProductModal(false); setEditingProduct(null); }}
        />
      )}
      {showCreateProductModal && (
        <CreateProductModal
          createProductData={createProductData}
          setCreateProductData={setCreateProductData}
          handleSaveNewProduct={handleSaveNewProduct} 
          onCancel={() => setShowCreateProductModal(false)}
        />
      )}

      <Footer />
    </div>
  );
};

export default StoreManagement;
</file>

<file path="pages/StorePage.jsx">
// src/pages/StorePage.jsx
import React, { useState, useEffect, useContext } from "react";
import { useParams } from "react-router-dom"; // Không cần Link ở đây trừ khi có link khác
import axios from "axios";
import { ShopContext } from "../context/ShopContext";
import { FaCheckCircle, FaTimesCircle, FaSpinner } from 'react-icons/fa'; // Import icons
import Item from "../components/Item"; // Component để hiển thị từng sản phẩm
import { toast } from "react-toastify";
import banner from "../assets/banner.jpg"; // Banner mặc định hoặc banner của store
import Footer from "../components/Footer"; // Import Footer

// Import Shadcn UI components
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton"; // Import Skeleton cho loading
import { AlertCircle } from "lucide-react"; // Icon cho Alert
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"; // Import Alert

const StorePage = () => {
    const { storeId } = useParams();
    const [store, setStore] = useState(null);
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const { followStore, unfollowStore, isFollowingStore, token, backendUrl } = useContext(ShopContext);
    const [isFollowing, setIsFollowing] = useState(null); // null: loading, true: following, false: not following
    const [followLoading, setFollowLoading] = useState(false); // Loading state cho hành động follow/unfollow

    // Fetch store details and products
    useEffect(() => {
        const fetchStoreData = async () => {
            setLoading(true);
            setError(null);
            setIsFollowing(null);
            setFollowLoading(false);
            try {
                const response = await axios.get(`${backendUrl}/api/store/public/${storeId}`);
                if (response.data.success) {
                    setStore(response.data.store);
                    // API /public/:storeId đã trả về products rồi, không cần gọi /api/product/store/:storeId nữa
                    setProducts(response.data.products || []); // Đảm bảo products là mảng
                } else {
                    setError(response.data.message || "Store not found");
                }
            } catch (err) {
                setError(err.response?.data?.message || "An error occurred fetching store data.");
            } finally {
                setLoading(false);
            }
        };

        if (storeId) {
            fetchStoreData();
        } else {
            setError("Invalid Store ID.");
            setLoading(false);
        }
    }, [storeId, backendUrl]);

    // Check following status when token or store data is available
    useEffect(() => {
        const checkFollowing = async () => {
            // Chỉ kiểm tra khi có token, có storeId và store data đã load xong (để tránh gọi API thừa)
            if (token && storeId && store) {
                setIsFollowing(null); // Bắt đầu trạng thái loading
                try {
                    const following = await isFollowingStore(storeId);
                    setIsFollowing(following);
                } catch (error) {
                    console.error("Error checking follow status:", error);
                    setIsFollowing(false); // Mặc định là false nếu lỗi
                    // toast.error("Could not check follow status.");
                }
            } else {
                 setIsFollowing(false); // Không đăng nhập => không follow
            }
        };

        checkFollowing();
        // Dependency bao gồm cả `store` để đảm bảo check lại nếu store data thay đổi (dù ít khả năng)
    }, [storeId, token, isFollowingStore, store]);

    // Handle follow/unfollow button click
    const handleFollowClick = async () => {
        if (!token) {
            toast.error("Please log in to follow or unfollow a store.");
            return;
        }
        if (isFollowing === null || followLoading) return; // Chặn click khi đang loading

        setFollowLoading(true);
        try {
            let result;
            if (isFollowing) {
                result = await unfollowStore(storeId);
            } else {
                result = await followStore(storeId);
            }
            if (result && result.success) { // Kiểm tra result và success
                // Kiểm tra lại trạng thái từ backend để đảm bảo chính xác
                const updatedFollowingStatus = await isFollowingStore(storeId);
                setIsFollowing(updatedFollowingStatus);
            }
            // Toast lỗi đã được xử lý bên trong followStore/unfollowStore
        } catch (error) {
            console.error("Error in handleFollowClick:", error);
             toast.error("An error occurred."); // Toast lỗi chung nếu try-catch bắt được lỗi khác
        } finally {
            setFollowLoading(false);
        }
    };

    // --- Render Loading State ---
    if (loading) {
        return (
            <div className="flex flex-col items-center justify-center min-h-screen p-4">
                 <FaSpinner className="animate-spin h-12 w-12 text-gray-500 mb-4" />
                 <p className="text-muted-foreground">Loading store...</p>
             </div>
        );
    }

    // --- Render Error State ---
    if (error) {
        return (
             <div className="flex flex-col items-center justify-center min-h-screen p-4 text-center">
                 <Alert variant="destructive" className="max-w-md">
                     <AlertCircle className="h-5 w-5" />
                     <AlertTitle>Error</AlertTitle>
                     <AlertDescription>{error}</AlertDescription>
                 </Alert>
                 <Button asChild variant="outline" className="mt-4">
                     <Link to="/">Go back home</Link>
                 </Button>
             </div>
        );
    }

    // --- Render Store Not Found State ---
    if (!store) {
        return (
             <div className="flex flex-col items-center justify-center min-h-screen p-4 text-center">
                 <h2 className="text-2xl font-semibold mb-2">Store Not Found</h2>
                 <p className="text-muted-foreground mb-4">The store you are looking for does not exist.</p>
                  <Button asChild variant="outline">
                     <Link to="/">Go back home</Link>
                 </Button>
             </div>
        );
    }

    // --- Render Main Content ---
    return (
        <div className=" min-h-screen flex flex-col"> {/* Light background */}
            {/* Banner */}
            <div className="relative w-full h-52 md:h-64 overflow-hidden mb-8 shadow-md">
                <img
                    src={banner} // Có thể thay bằng store.banner nếu có
                    alt={`${store.storeName} Banner`}
                    className="object-cover w-full h-full"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-transparent" /> {/* Gradient đậm hơn */}
                <div className="absolute bottom-4 left-4 md:left-8 flex items-center gap-4 z-10">
                    <img
                        src={store.storeLogo || "/default_store_logo.png"}
                        alt={`${store.storeName} Logo`}
                        className="w-20 h-20 md:w-24 md:h-24 rounded-full object-cover ring-4 ring-white shadow-lg"
                    />
                    <div className="text-white">
                        <h1 className="text-2xl md:text-4xl font-bold drop-shadow-md">{store.storeName}</h1>
                        <p className="text-sm md:text-base text-gray-200 drop-shadow-sm">{store.storeAddress || "No address provided"}</p>
                        {/* TODO: Add follower count later */}
                        {/* <p className="text-xs mt-1 text-gray-300">X followers</p> */}
                    </div>
                </div>
            </div>

            <main className="flex-grow max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12 w-full">
                {/* "Tabs" & Follow Button Area */}
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8 border-b border-gray-200 pb-4">
                    <div className="flex gap-6"> {/* Tăng gap */}
                        {/* Static labels mimicking tabs */}
                        <span className="px-1 py-2 text-lg font-semibold text-gray-900 border-b-2 border-gray-900 cursor-default"> {/* Đậm hơn */}
                            Products
                        </span>
                        <span className="px-1 py-2 text-lg font-medium text-gray-400 hover:text-gray-600 cursor-default"> {/* Nhạt hơn */}
                            About
                        </span>
                         {/* Add more static tabs if needed */}
                    </div>
                    {/* Follow/Unfollow Button using Shadcn */}
                     {token && ( // Chỉ hiển thị nút Follow/Unfollow nếu đã đăng nhập
                        <Button
                            onClick={handleFollowClick}
                            variant={isFollowing ? "destructive" : "default"}
                            size="sm"
                            disabled={isFollowing === null || followLoading}
                            className="w-full sm:w-auto" // Đảm bảo nút không quá rộng trên mobile
                        >
                            {followLoading ? (
                                <FaSpinner className="animate-spin mr-2 h-4 w-4" />
                            ) : isFollowing ? (
                                <FaTimesCircle className="mr-2 h-4 w-4" />
                            ) : (
                                <FaCheckCircle className="mr-2 h-4 w-4" />
                            )}
                            {isFollowing === null ? 'Checking...' : isFollowing ? 'Unfollow' : 'Follow'}
                        </Button>
                    )}
                    {!token && ( // Hiển thị nút yêu cầu đăng nhập nếu chưa login
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => navigate('/login')} // Điều hướng đến trang login
                            className="w-full sm:w-auto"
                        >
                            Log in to follow
                        </Button>
                    )}
                </div>

                {/* Products Grid Card */}
                 <Card>
                    <CardHeader>
                        <CardTitle className="text-xl">Store Products</CardTitle>
                    </CardHeader>
                    <CardContent>
                        {products.length === 0 ? (
                            <p className="text-muted-foreground text-center py-8">
                                This store hasn't added any products yet.
                            </p>
                        ) : (
                            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                                {products.map((product) => (
                                    <Item key={product._id} product={product} />
                                ))}
                            </div>
                        )}
                    </CardContent>
                </Card>
            </main>

             <Footer /> {/* Đặt Footer ở cuối cùng */}
        </div>
    );
};

export default StorePage;
</file>

<file path="pages/UserOrders.jsx">
import React, { useContext, useEffect, useState, useCallback } from "react";
import { Link } from "react-router-dom"; // Needed for links inside components
import axios from "axios";

// --- Context ---
import { ShopContext } from "../context/ShopContext"; // Assuming provides token, backendUrl

// --- UI Components (Shadcn/ui or equivalent) ---
// Make sure you have installed/added these components
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogClose, // Giữ lại DialogClose
    // DialogFooter, // Nếu cần
    // DialogTrigger, // Không cần vì mở bằng state
} from "@/components/ui/dialog"; // <<< THAY ĐỔI

// --- Icons (from lucide-react) ---
// Make sure lucide-react is installed
import {
    AlertCircle,
    ShoppingBag,
    ArrowRight,
    Package,
    CreditCard,
    MapPin,
    X,
    CalendarDays,
    Hourglass,
    CheckCircle,
    XCircle,
} from "lucide-react";

// --- Components ---
import Footer from "../components/Footer";
// Removed Title component import, using simple <h1> for flexibility
// import OrderDetail from "../components/OrderDetail"; // Replaced by OrderDetailsDrawer

// --- Utilities (Using the helpers file defined previously) ---
import {
    formatCurrency,
    formatDate,
    getStatusBadgeVariant,
} from "../utils/helpers"; // Adjust path if necessary

// --- Custom Timeline Components (Consider extracting) ---
// (Copied from previous example - ensure these styles work with your setup)
const Timeline = ({ children }) => (
    <div className="relative pl-6 sm:pl-8">{children}</div>
);
const TimelineItem = ({ children, isLast }) => (
    <div
        className={`relative pb-8 ${
            !isLast
                ? "after:absolute after:top-5 after:left-[calc(0.375rem-1px)] sm:after:left-[calc(0.5rem-1px)] after:w-0.5 after:h-full after:bg-border"
                : ""
        }`}
    >
        {children}
    </div>
);
const TimelineDot = ({ icon, status }) => {
    const variant = getStatusBadgeVariant(status);
    let bgColor = "bg-gray-400"; // Default
    if (variant === "success") bgColor = "bg-green-500";
    else if (variant === "destructive") bgColor = "bg-red-500";
    else if (variant === "warning") bgColor = "bg-yellow-500";
    else if (variant === "processing" || status?.toLowerCase() === 'processing' || status?.toLowerCase() === 'out for delivery') bgColor = "bg-blue-500";
    else if (variant === "secondary" || variant === 'default') bgColor = 'bg-gray-500';
    else bgColor = 'bg-primary'; // Fallback to primary for 'default' variant

    return (
        <div
            className={`absolute top-1 -left-1.5 sm:-left-2 z-10 w-7 h-7 sm:w-8 sm:h-8 rounded-full flex items-center justify-center ring-4 ring-background ${bgColor}`}
        >
            {icon || <div className="w-2 h-2 bg-white rounded-full"></div>}
        </div>
    );
};
const TimelineContent = ({ children }) => (
    <div className="ml-4 sm:ml-6">{children}</div>
);
const getStatusIcon = (status) => {
    const lowerStatus = String(status || "").toLowerCase().trim();
    const iconClass = "w-4 h-4 text-white";

    if (lowerStatus === "delivered") return <CheckCircle className={iconClass} />;
    if (lowerStatus === "cancelled" || lowerStatus === "failed") return <XCircle className={iconClass} />;
    if (lowerStatus === "processing" || lowerStatus === "out for delivery") return <Hourglass className={`${iconClass} animate-spin-slow`} />;
    if (lowerStatus === "paid" || lowerStatus === "order placed") return <Package className={iconClass} />;
    return <CalendarDays className={iconClass} />; // Default
};


// --- Order Summary Card Component (Adapted) ---
const OrderSummaryCard = React.memo(({ order, onSelectOrder, currencyCode, locale }) => (
    <div className="bg-card border rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden">
        <div className="p-4 sm:p-5">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-3">
                {/* Info Left */}
                <div className="space-y-1">
                    <p className="text-xs text-muted-foreground">
                        {formatDate(order.date, locale)} {/* Pass locale */}
                    </p>
                    <h3 className="text-base sm:text-lg font-semibold text-foreground">
                        Order #{order._id.slice(-6)}
                    </h3>
                    <Badge
                        variant={getStatusBadgeVariant(order.status)}
                        size="sm"
                        className="capitalize !mt-1.5"
                    >
                        {order.status || "Unknown"}
                    </Badge>
                </div>
                {/* Info Right & Action */}
                <div className="flex flex-col items-start sm:items-end gap-2">
                    <p className="text-lg font-bold text-primary">
                        {/* Use currencyCode and locale */}
                        {formatCurrency(order.amount, currencyCode, locale)}
                    </p>
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={() => onSelectOrder(order)}
                    >
                        View Details <ArrowRight className="ml-1 h-4 w-4" />
                    </Button>
                </div>
            </div>
            {/* Optional: Product image previews */}
            {order.items && order.items.length > 0 && (
                <div className="mt-3 pt-3 border-t flex space-x-2 overflow-x-auto">
                    {order.items.slice(0, 4).map((item, idx) => (
                         <img
                            key={item._id || idx}
                            // Assuming item might have an 'image' field directly or nested
                            src={item.image?.[0] || '/placeholder-image.png'}
                            alt={item.name || item.productId?.name || 'Product'}
                            className="w-10 h-10 rounded object-cover border flex-shrink-0 bg-muted"
                            loading="lazy"
                            onError={(e) => { e.target.onerror = null; e.target.src = '/placeholder-image.png'; }}
                        />
                    ))}
                    {order.items.length > 4 && (
                        <span className="text-xs self-center text-muted-foreground ml-1">
                            +{order.items.length - 4} more
                        </span>
                    )}
                </div>
            )}
        </div>
    </div>
));

// --- Order Details Drawer Component (Adapted) ---
// (Similar to previous example, ensure props match)
const OrderDetailsPanel = ({ order, isOpen, onClose, currencyCode, locale }) => {
    if (!order) return null;

    // Function to clean color string (giữ nguyên)
    const cleanColor = (colorStr) => {
      return typeof colorStr === 'string' ? colorStr.replace(/['"]+/g, '') : colorStr;
    };

    return (
        // Sử dụng Dialog thay vì Drawer
        <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
            <DialogContent className="fixed h-full w-full max-w-lg border-l bg-background p-0 outline-none flex flex-col gap-0 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:rounded-none duration-300"> {/* <<< THAY ĐỔI VÀ THÊM CLASS */}
                <DialogHeader className="border-b p-4 flex-shrink-0"> {/* Thêm flex-shrink-0 */}
                    <DialogTitle className="text-xl font-semibold flex items-center gap-2">
                        <Package className="w-5 h-5 text-primary" /> Order Details
                    </DialogTitle>
                    <DialogDescription>
                        Order #{order._id}{" "}
                        <Badge
                            variant={getStatusBadgeVariant(order.status)}
                            className="ml-2 capitalize"
                        >
                            {order.status}
                        </Badge>
                    </DialogDescription>
                    {/* DialogClose vẫn dùng để tạo nút đóng */}
                    <DialogClose asChild className="absolute top-3 right-3">
                        {/* <Button variant="ghost" size="icon">
                            <X className="h-5 w-5" />
                            <span className="sr-only">Close</span>
                        </Button> */}
                    </DialogClose>
                </DialogHeader>

                {/* Nội dung có thể cuộn */}
                <div className="p-5 overflow-y-auto space-y-6 flex-grow">
                    {/* Items Section */}
                    <section>
                        <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                            <ShoppingBag className="w-5 h-5 text-muted-foreground" /> Items ({order.items?.length || 0})
                        </h3>
                        <div className="space-y-4 max-h-[calc(100vh-300px)] sm:max-h-[calc(100vh-350px)] overflow-y-auto pr-2"> {/* Giới hạn chiều cao tương đối */}
                            {order.items && order.items.length > 0 ? (
                                order.items.map((item, index) => (
                                    <React.Fragment key={item._id || index}>
                                        <div className="flex items-start gap-3">
                                            <img
                                                src={item.image?.[0] || '/placeholder-image.png'}
                                                alt={item.name || 'Product image'}
                                                className="w-16 h-16 rounded-md object-cover border bg-muted flex-shrink-0"
                                                loading="lazy"
                                                onError={(e) => { e.target.onerror = null; e.target.src = '/placeholder-image.png'; }}
                                            />
                                            <div className="flex-grow text-sm space-y-0.5">
                                                <p className="font-medium text-foreground line-clamp-2">
                                                    {item.name || "Unnamed Product"}
                                                </p>
                                                <p className="text-muted-foreground text-xs">
                                                    Qty: {item.quantity || 1}
                                                    {item.color && <span className="ml-2 pl-2 border-l">Color: {cleanColor(item.color)}</span>}
                                                    {item.size && <span className="ml-2 pl-2 border-l">Size: {item.size}</span>}
                                                </p>
                                                <p className="text-foreground font-semibold pt-0.5">
                                                     {formatCurrency(item.price, currencyCode, locale)}
                                                </p>
                                            </div>
                                            <Button
                                                variant="link"
                                                size="sm"
                                                asChild
                                                className="ml-auto self-start h-auto p-0 text-primary hover:text-primary/80 text-xs"
                                            >
                                                <Link to={`/product/${item._id}`}>View</Link>
                                            </Button>
                                        </div>
                                        {index < order.items.length - 1 && <Separator className="my-3" />}
                                    </React.Fragment>
                                ))
                            ) : (
                                <p className="text-muted-foreground text-sm">No item details available.</p>
                            )}
                        </div>
                    </section>

                    <Separator />

                    {/* Summary & Address Section */}
                     <section className="grid grid-cols-1 sm:grid-cols-2 gap-5">
                        {/* Summary */}
                        <div className="space-y-2">
                            <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
                                <CreditCard className="w-5 h-5 text-muted-foreground" /> Summary
                            </h3>
                            <div className="text-sm space-y-1 text-muted-foreground">
                                <div className="flex justify-between">
                                    <span>Subtotal:</span>{" "}
                                    <span className="text-foreground">
                                        {formatCurrency(order.amount, currencyCode, locale)}
                                    </span>
                                </div>
                                <div className="flex justify-between">
                                    <span>Shipping:</span> <span className="text-foreground">Free</span> {/* Adjust if needed */}
                                </div>
                                <Separator className="my-1.5" />
                                <div className="flex justify-between font-bold text-base text-foreground">
                                    <span>Total:</span>{" "}
                                    <span>{formatCurrency(order.amount, currencyCode, locale)}</span>
                                </div>
                                <p className="pt-1">
                                    Payment:{" "}
                                    <span className="font-medium text-foreground capitalize">
                                        {order.paymentMethod || "N/A"}
                                    </span>
                                    <span
                                        className={`font-medium ml-1.5 px-1.5 py-0.5 rounded text-xs ${
                                            order.payment
                                                ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                                                : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
                                        }`}
                                    >
                                        {order.payment ? "Paid" : "Pending"}
                                    </span>
                                </p>
                            </div>
                        </div>

                        {/* Shipping Address */}
                        <div className="space-y-1">
                            <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
                                <MapPin className="w-5 h-5 text-muted-foreground" /> Shipping To
                            </h3>
                             {order.address && (order.address.firstName || order.address.street) ? (
                                <div className="text-sm text-muted-foreground leading-relaxed">
                                    <p className="font-medium text-foreground">
                                         {order.address.firstName || ''} {order.address.lastName || ''}
                                    </p>
                                    <p>{order.address.street || ''}</p>
                                    <p>
                                        {order.address.city || ''}
                                        {(order.address.city && order.address.state) ? ", " : ""}
                                        {order.address.state || ''} {order.address.zipcode || ''}
                                    </p>
                                    <p>{order.address.country || ''}</p>
                                    {order.address.phone && <p>Phone: {order.address.phone}</p>}
                                </div>
                            ) : (
                                <p className="text-sm text-muted-foreground">Address details not available.</p>
                            )}
                        </div>
                    </section>
                </div>
            </DialogContent>
        </Dialog>
    );
};


// --- Main Upgraded UserOrders Component ---
const UserOrders = () => {
    const CURRENCY_CODE = 'USD';
    const LOCALE = 'en-US'; // or 'vi-VN'

    const { backendUrl, token } = useContext(ShopContext);

    const [orders, setOrders] = useState([]);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isPanelOpen, setIsPanelOpen] = useState(false); // Đổi tên state cho rõ ràng

    // Renamed function to match component name convention
    const fetchOrders = useCallback(async () => {
        setIsLoading(true);
        setError(null);

        if (!token) {
            setError("Please log in to view your orders.");
            setIsLoading(false);
            return;
        }

        try {
            // Using GET request as in the original code
            const response = await axios.get(`${backendUrl}/api/order/userorder`, {
                headers: { token },
            });

            if (response.data.success && Array.isArray(response.data.orders)) {
                // Reverse directly here or sort by date descending for clarity
                 const sortedOrders = response.data.orders.sort((a, b) => new Date(b.date) - new Date(a.date));
                setOrders(sortedOrders);
                 // No need to pre-select an order for the drawer view
                // if (sortedOrders.length > 0) {
                //     setSelectedOrder(sortedOrders[0]);
                // }
            } else {
                setError(response.data.message || "Failed to load orders.");
                setOrders([]);
            }
        } catch (err) {
            console.error("Error fetching orders:", err);
             let errorMessage = "An unexpected error occurred while fetching your orders.";
             if (axios.isAxiosError(err) && err.response) {
                 errorMessage = err.response.data?.message || err.message;
             } else if (err instanceof Error) {
                 errorMessage = err.message;
             }
            setError(errorMessage);
            setOrders([]);
        } finally {
            setIsLoading(false);
        }
    }, [backendUrl, token]);

    useEffect(() => {
        fetchOrders();
    }, [fetchOrders]);

    const handleSelectOrder = useCallback((order) => {
        setSelectedOrder(order);
        setIsPanelOpen(true); // Mở panel
    }, []);

    const handleClosePanel = useCallback(() => { // Đổi tên hàm xử lý đóng
        setIsPanelOpen(false);
        const timer = setTimeout(() => setSelectedOrder(null), 300); // Delay để animation hoàn thành
        return () => clearTimeout(timer);
    }, []);

    // --- Rendering Logic ---
    const renderContent = () => {
        if (isLoading) {
            return (
                <Timeline>
                    {[...Array(3)].map((_, i) => (
                        <TimelineItem key={`skeleton-${i}`} isLast={i === 2}>
                            <TimelineDot status="loading" />
                            <TimelineContent>
                                <Skeleton className="h-24 w-full rounded-lg" />
                            </TimelineContent>
                        </TimelineItem>
                    ))}
                </Timeline>
            );
        }

        if (error) {
            return (
                <Alert variant="destructive" className="max-w-xl mx-auto">
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>Error Loading Orders</AlertTitle>
                    <AlertDescription>
                        {error}
                        <div className="mt-4 flex gap-2">
                           <Button onClick={fetchOrders} size="sm">Retry</Button>
                           {/* Optional: Link to home */}
                           <Button variant="outline" size="sm" asChild>
                               <Link to="/">Go Home</Link>
                           </Button>
                        </div>
                    </AlertDescription>
                </Alert>
            );
        }

        if (orders.length === 0) {
            return (
                 <div className="text-center py-20 px-6 flex flex-col items-center gap-5 border border-dashed rounded-lg max-w-md mx-auto bg-card">
                    <CalendarDays className="w-20 h-20 text-gray-300 dark:text-gray-600" />
                    <h2 className="text-2xl font-semibold text-foreground">
                        Your Order Timeline is Empty
                    </h2>
                    <p className="text-muted-foreground">
                        Looks like you haven't placed any orders yet.
                    </p>
                    <Button asChild size="lg" className="mt-4">
                        <Link to="/">
                            <ShoppingBag className="mr-2 h-5 w-5" /> Start Shopping
                        </Link>
                    </Button>
                </div>
            );
        }

        // Display Orders Timeline
        return (
            <Timeline>
                {orders.map((order, index) => (
                    <TimelineItem
                        key={order._id}
                        isLast={index === orders.length - 1}
                    >
                        <TimelineDot
                            status={order.status}
                            icon={getStatusIcon(order.status)}
                        />
                        <TimelineContent>
                            {/* Render the summary card */}
                            <OrderSummaryCard
                                order={order}
                                onSelectOrder={handleSelectOrder}
                                currencyCode={CURRENCY_CODE}
                                locale={LOCALE}
                            />
                        </TimelineContent>
                    </TimelineItem>
                ))}
            </Timeline>
        );
    };

    // --- Component Return ---
    return (
         // Using background from previous example, adjust if needed
        <div className="min-h-screen flex flex-col bg-gradient-to-b from-background to-muted/30">
             {/* Use container for padding and max-width */}
            <main className="flex-grow container mx-auto max-w-7xl py-12 md:py-16 px-4 sm:px-6 lg:px-8">
                 <h1 className="text-3xl lg:text-4xl font-extrabold mb-10 lg:mb-12 text-center text-foreground tracking-tight">
                    My Order Journey
                </h1>

                 {/* Max width for the timeline itself */}
                <div className="max-w-3xl mx-auto">
                    {renderContent()}
                </div>
            </main>

             {/* Drawer sits outside the main flow */}
             <OrderDetailsPanel
                order={selectedOrder}
                isOpen={isPanelOpen} // Truyền state mở/đóng
                onClose={handleClosePanel} // Truyền hàm xử lý đóng
                currencyCode={CURRENCY_CODE}
                locale={LOCALE}
            />

            <Footer />
        </div>
    );
};

export default UserOrders;
</file>

<file path="pages/Verify.jsx">
import React, { useContext, useEffect, useState } from 'react'
import { ShopContext } from '../context/ShopContext'
import { useSearchParams } from 'react-router-dom'
import axios from 'axios'
import { toast } from 'react-toastify'

const Verify = () => {

    const {navigate, token, setCartItems, backendUrl} = useContext(ShopContext)
    const [searchParams, setSearchParams] = useSearchParams()

    const success = searchParams.get("success")
    const orderId = searchParams.get("orderId")

    const verifyPayment = async ()=> {
       try {
        if(!token){
            return null
        }
        const response = await axios.post(backendUrl + "/api/order/verifyStripe", {success, orderId}, {headers: {token}})
        if(response.data.success){
            setCartItems({})
            navigate('/orders')
        }else{
            navigate('/cart')
        }
       } catch (error) {
        console.log(error)
        toast.error(error.message)
       }
    }

    useEffect(()=>{
     verifyPayment()
    }, [])

  return (
    <div>Verify</div>
  )
}

export default Verify
</file>

<file path="utils/helpers.js">
// src/utils/helpers.js

/**
 * Định dạng số thành chuỗi tiền tệ theo locale và mã tiền tệ.
 * Ví dụ: formatCurrency(12000, 'USD', 'en-US') => "$12,000.00"
 * Ví dụ: formatCurrency(250000, 'VND', 'vi-VN') => "250.000 ₫"
 * @param {number} amount - Số tiền cần định dạng.
 * @param {string} currencyCode - Mã tiền tệ (ví dụ: 'USD', 'VND').
 * @param {string} locale - Mã locale (ví dụ: 'en-US', 'vi-VN'). Mặc định là 'en-US'.
 * @returns {string} Chuỗi tiền tệ đã định dạng hoặc chuỗi rỗng nếu đầu vào không hợp lệ.
 */
export const formatCurrency = (amount, currencyCode = 'USD', locale = 'en-US') => {
    const numericAmount = Number(amount);
    if (isNaN(numericAmount)) {
        console.warn(`formatCurrency received an invalid amount: ${amount}`);
        // Trả về một giá trị mặc định hoặc thể hiện lỗi tùy theo yêu cầu
        // Ví dụ: return 'N/A'; hoặc formatCurrency(0, currencyCode, locale);
        return formatCurrency(0, currencyCode, locale);
    }

    try {
        return new Intl.NumberFormat(locale, {
            style: 'currency',
            currency: currencyCode,
            // Bạn có thể thêm các tùy chọn khác ở đây nếu cần
            // minimumFractionDigits: 0, // Bỏ số thập phân cho VND chẳng hạn
        }).format(numericAmount);
    } catch (error) {
        console.error(`Error formatting currency: ${error}`);
        // Trả về giá trị gốc hoặc một định dạng dự phòng đơn giản nếu Intl không hoạt động
        return `${currencyCode} ${numericAmount.toFixed(2)}`;
    }
};

/**
 * Định dạng chuỗi ngày hoặc đối tượng Date thành chuỗi ngày thân thiện.
 * Ví dụ: formatDate('2025-03-26T10:00:00Z', 'en-US') => "Mar 26, 2025"
 * Ví dụ: formatDate(new Date(), 'vi-VN') => "26/03/2025"
 * @param {string | Date} dateInput - Chuỗi ngày hoặc đối tượng Date.
 * @param {string} locale - Mã locale (ví dụ: 'en-US', 'vi-VN'). Mặc định là 'en-US'.
 * @returns {string} Chuỗi ngày đã định dạng hoặc "Invalid Date".
 */
export const formatDate = (dateInput, locale = 'en-US') => {
    if (!dateInput) return '';

    try {
        const date = new Date(dateInput);
        // Kiểm tra xem date có hợp lệ không
        if (isNaN(date.getTime())) {
            return "Invalid Date";
        }

        // Tùy chọn định dạng ngày tháng (có thể tùy chỉnh)
        const options = {
            year: 'numeric',
            month: 'short', // 'long', 'numeric', '2-digit'
            day: 'numeric', // '2-digit'
            // Có thể thêm giờ phút nếu cần
            // hour: '2-digit',
            // minute: '2-digit',
        };

        // Nếu locale là 'vi-VN', có thể dùng định dạng khác
        if (locale === 'vi-VN') {
            const vnOptions = {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
            };
             return new Intl.DateTimeFormat(locale, vnOptions).format(date);
        }


        return new Intl.DateTimeFormat(locale, options).format(date);
    } catch (error) {
        console.error(`Error formatting date: ${error}`);
        return "Invalid Date";
    }
};

/**
 * Ánh xạ trạng thái đơn hàng sang variant tương ứng của component Badge (Shadcn UI).
 * @param {string | null | undefined} status - Trạng thái đơn hàng (ví dụ: 'Processing', 'Delivered').
 * @returns {'default' | 'secondary' | 'destructive' | 'outline' | 'success' | 'warning'} Variant của Badge.
 */
export const getStatusBadgeVariant = (status) => {
    const lowerCaseStatus = String(status || '').toLowerCase().trim();

    switch (lowerCaseStatus) {
        case 'delivered':
        case 'completed':
        case 'paid': // Thêm 'paid' vào success nếu muốn
            return 'success';
        case 'cancelled':
        case 'failed':
        case 'refunded':
            return 'destructive';
        case 'pending': // Trạng thái chờ xử lý ban đầu
        case 'on hold':
            return 'warning'; // Hoặc 'secondary' tùy ý thích
        case 'processing': // Đang xử lý
        case 'shipped': // Đã gửi hàng
        case 'out for delivery': // Đang giao hàng
            return 'default'; // Thường là màu xanh dương hoặc màu chính
        case 'order placed': // Mới đặt hàng, chưa xử lý
             return 'secondary'; // Màu xám nhạt
        default:
            return 'secondary'; // Mặc định cho các trạng thái không xác định
    }
};

// Bạn có thể thêm các helper functions khác vào đây nếu cần
</file>

</files>
